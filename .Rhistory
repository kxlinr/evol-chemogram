position = position_dodge(width = 0.75),
aes(y=bar_n_displace), size = bar_n_size, angle = bar_n_angle) +
theme_bw(base_size = 15) + #theme and sizing
theme(axis.text.y = element_text(size = 20),
axis.text.x = element_text(size = 20),
legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 10))
ggsave(here("Plots", "Epithelial Cancers",
paste0(length(sigs), "sig_prediction_freq_epi_gapdh.png")),
width=15, height=8)
surv_sup = merge(scores_sup, fit_results,
by=c("cell_line", "subtype", "drug_abbrev"))
ggplot(surv_sup, aes(x=rank, y=surv, col=rank, fill=rank)) +
geom_boxplot(position="dodge") +
labs(title="Distribution of Survival by Predicted Sensitivity Ranking",
x="Sensitivity Ranking",
y="Survival")+
scale_color_manual(values = col_values) +
scale_fill_manual(values = fill_values) +
facet_wrap(~drug_abbrev,
labeller=as_labeller(setNames(sig_drugs, names(sig_labels))),
nrow=plot_rows) +
stat_summary(fun.data = give.n, geom = "text", fun.y = median,
position = position_dodge(width = 0.75),
aes(y=viol_n_displace), size = 5, angle = bar_n_angle) +
theme_bw(base_size = 15) + #theme and sizing
theme(axis.text.y = element_text(size = 20),
axis.text.x = element_text(size = 20),
legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 10))
ggsave(here("Plots", paste0(length(sigs), "sig_prediction_surv_gapdh.png")),
width=15, height=8)
ggplot(surv_sup %>% filter(subtype %in% epi), aes(x=rank, y=surv, fill=rank, col=rank)) +
geom_boxplot(position="dodge") +
labs(title="Distribution of Survival by Predicted Sensitivity Ranking",
subtitle = "in Epithelial Cancers",
x="Sensitivity Ranking",
y="Survival")+
scale_color_manual(values = col_values) +
scale_fill_manual(values = fill_values) +
facet_wrap(~drug_abbrev,
labeller=as_labeller(setNames(sig_drugs, names(sig_labels))),
nrow=plot_rows) +
stat_summary(fun.data = give.n, geom = "text", fun.y = median,
position = position_dodge(width = 0.75),
aes(y=viol_n_displace), size = 5, angle = bar_n_angle) +
theme_bw(base_size = 15) + #theme and sizing
theme(axis.text.y = element_text(size = 20),
axis.text.x = element_text(size = 20),
legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 10))
ggsave(here("Plots", "Epithelial Cancers",
paste0(length(sigs), "sig_prediction_surv_epi_gapdh.png")),
width=15, height=8)
ggplot(surv_sup, aes(x=score, y=surv)) +
geom_point(alpha=0.4, col = "#48705d") +
labs(title="Predicted Sensitivity vs. Observed Survival",
x="Signature Score",
y="Survival")+
facet_wrap(~drug_abbrev,
labeller=as_labeller(setNames(sig_drugs, names(sig_labels))),
nrow=plot_rows) +
theme_bw(base_size = 15) + #theme and sizing
theme(axis.text.y = element_text(size = 20),
axis.text.x = element_text(size = 20),
legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 10))
ggsave(here("Plots",
paste0(length(sigs), "sig_score_v_surv_gapdh.png")),
width=15, height=7)
ggplot(surv_sup %>% filter(subtype %in% epi), aes(x=score, y=surv)) +
geom_point(alpha=0.4, col = "#48705d") +
labs(title="Predicted Sensitivity vs. Observed Survival",
subtitle = "in Epithelial Cancers",
x="Signature Score",
y="Survival")+
facet_wrap(~drug_abbrev,
labeller=as_labeller(setNames(sig_drugs, names(sig_labels))),
nrow=plot_rows) +
theme_bw(base_size = 15) + #theme and sizing
theme(axis.text.y = element_text(size = 20),
axis.text.x = element_text(size = 20),
legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 10))
ggsave(here("Plots", "Epithelial Cancers",
paste0(length(sigs), "sig_score_v_surv_epi_gapdh.png")),
width=15, height=7)
ggplot(surv_sup, aes(x=as.numeric(rank), y=surv)) +
geom_point(fill = "#b4cfc3", col = "#48705d", alpha=0.5) +
labs(title="Distribution of Survival by Predicted Sensitivity Ranking",
x="Sensitivity Ranking",
y="Survival")+
facet_wrap(~drug_abbrev,
labeller=as_labeller(setNames(sig_drugs, names(sig_labels))),
nrow=plot_rows) +
stat_summary(fun.data = give.n, geom = "text", fun.y = median,
position = position_dodge(width = 0.75),
aes(y=viol_n_displace), size = 5, angle = bar_n_angle) +
theme_bw(base_size = 15) + #theme and sizing
theme(axis.text.y = element_text(size = 20),
axis.text.x = element_text(size = 20),
legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 10))
fit_results = readRDS(here("Results",
paste0(length(sigs), "sig_nlme_fitted_data.rds")))
knitr::opts_chunk$set(echo = TRUE)
# devtools::install_github("cancerrxgene/gdscIC50", build_vignettes=FALSE) #restart R after downloading
library(here)
library(gdscIC50) #for cleaning and normalizing the raw drug response data
library(pheatmap) #for plotting survival and sig scores
library(gtools) #for generating the permutations/scoring table
library(plyr) #for match_df to get acc score from rank order
library(patchwork) #for plotting
library(tidyverse)
conflicted::conflict_prefer("here", "here")
conflicted::conflict_prefer("filter", "dplyr")
conflicted::conflict_prefer("mutate", "dplyr")
conflicted::conflict_prefer("select", "dplyr")
cell_lines = readRDS(here("Data", "cleaned_cell_line_meta.rds"))
subtype_key = readRDS(here("Data", "subtype_key.rds"))
sig_files = list.files(here("Data", "Signatures"))
sigs = lapply(sig_files, function(x) readRDS(here("Data", "Signatures", x)))
names(sigs) = gsub("\\_.*", "", sig_files) #cut off everything after the first underscore
## we also need the full drug names to match with the correct drug response data. those need to be manually entered in the *same order* as the list shows
#make sure theyre spelled right! can check the `drug_id_key` table for spelling
names(sigs) #print this to make sure the order is correct
sig_drugs = c("Cisplatin", "Cytarabine", "5-Fluorouracil", "Gemcitabine", "Irinotecan",
"Luminespib", "Paclitaxel", "Topotecan", "Vinblastine", "Vorinostat")
rm(sig_files)
sigs[["cis"]] = c("LRRC8C", "LY6K", "MMP10","SLFN11", "STOML2","USP31","WDR3", "ZNF750")
sigs[["gem"]] = c("CRLF3", "MLKL", "POLR3G", "PROCR", "RELB", "SLFN11")
#Reload
scores=readRDS(here("Results",
paste0(length(sigs), "sig_scores.rds")))
scores = na.omit(scores)
scores_long = pivot_longer(scores,
cols = c(names(sigs)),
names_to = "drug_abbrev",
values_to = "score")
scored_ranks = readRDS(here("Results", paste0(length(sigs),"sig_accuracy_scores.rds")))
#all the values with NA had missing drug response data and should be excluded
nrow(scored_ranks)
scored_ranks_full = na.omit(scored_ranks) #986 to 759 for 3 sigs, 616 after rm unclassified cell lines
#968 to 670 for 10sig, 539 after rm unclass.
nrow(scored_ranks_full)
#create a new df with one row per subtype, and columns = subtype, proportion_correct
subtype = unique(scored_ranks_full$subtype)
subtype_scores = data.frame(subtype=subtype, accuracy=0, n = 0)
for (i in 1:length(subtype)){
#Subset data per subtype
subset = scored_ranks_full[which(scored_ranks_full$subtype == subtype[i]),]
#Store subtype name
subtype_scores$subtype[i] = subtype[i]
#calc and store % of cell line survivals correctly predicted
subtype_scores$accuracy[i] = round((sum(subset$accuracy)/nrow(subset)), digits=3)
#Indicate number of cell lines in subtype (n)
subtype_scores$n[i] = nrow(subset)
}
#order the rows by highest to lowest correct
subtype_scores = subtype_scores[order(subtype_scores$accuracy),]
#To maintain this order when we plot later, factorize the column
subtype_scores$subtype <- factor(subtype_scores$subtype,
ordered = TRUE,
levels = subtype_scores$subtype)
#remove unclassified cell lines
scored_ranks_full = scored_ranks_full %>% filter(subtype != "UNCLASSIFIED")
#Set order to = subtype_scores
cancer_order = (as.character(subtype_scores$subtype))[-c(which(as.character(subtype_scores$subtype)=="UNCLASSIFIED"))]
scored_ranks_full$subtype <- factor(scored_ranks_full$subtype,
ordered = TRUE,
levels = c(cancer_order))
scored_ranks_full = scored_ranks_full[order(scored_ranks_full$subtype),]
#remove unclassified from subtype score averages
subtype_scores$subtype <- factor(subtype_scores$subtype,
ordered = TRUE,
levels = c(cancer_order))
subtype_scores = subtype_scores[order(subtype_scores$subtype),]
#save
# saveRDS(scored_ranks_full, here("Results", paste0(length(sigs),"sig_accuracy_scores_cleaned.rds")))
# beeswarm boxplot
p1 = ggplot(scored_ranks_full, aes(x = subtype, y=accuracy)) + #select data to plot
geom_boxplot(width=0.4, fill="#9b2226", alpha = 0.6, fatten = NULL) + #boxplot, fatten=null is getting rid of the median line
ggbeeswarm::geom_quasirandom(method="smiley", width=0.2, alpha=0.4, size = 3, color="#6a040f") + #beeswarm
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), #add in a line to indicate the mean
width = 0.4, size = 2, linetype = "solid") +
geom_label(data=na.omit(subtype_scores), aes(x = subtype, y = 0, label = n), #add n
label.padding = unit(0.15, "lines"), label.size = 0.4, size = 8) +
scale_y_continuous(limits = c(0, 1), breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +
labs(title=paste0("Predictive Accuracy of ", length(sigs), "-sig Chemogram"),
subtitle = paste0(nrow(scored_ranks_full)," Cell Lines"),
y = "Predictive Accuracy", x = "Disease Site") +
theme_bw(base_size = 15) + #theme and sizing
theme(axis.text.y = element_text(size = 20),
axis.text.x = element_text(angle=30, size = 20, hjust=.9),
legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 10))
p1
ggsave(plot=p1,
filename=here("Plots",
paste0(length(sigs), "sig_accuracy_boxplots_gapdh.png")),
width = 15, height = 9) #save plot
epi = c("HNSC", "ESCA", "BRCA",
"COREAD", "LIHC", #"ACC", #leave this out bc it only has one cell line
"STAD", "KIRC", "LUAD",
"LUSC","MESO",
"PAAD", "THCA", "BLCA",
"CESC", "UCEC", "OV", "PRAD")
scored_ranks_epi = scored_ranks_full %>%
filter(subtype %in% epi)
subtype_scores_epi = subtype_scores %>%
filter(subtype %in% epi)
p2 = ggplot(scored_ranks_epi, aes(x = subtype, y=accuracy)) + #select data to plot
geom_boxplot(width=0.4, fill="#9b2226", alpha = 0.6, fatten = NULL) + #boxplot, fatten=null is getting rid of the median line
ggbeeswarm::geom_quasirandom(method="smiley", width=0.2, alpha=0.4, size = 3, color="#6a040f") + #beeswarm
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), #add in a line to indicate the mean
width = 0.4, size = 2, linetype = "solid") +
geom_label(data=subtype_scores_epi, aes(x = subtype, y = 0, label = n), #add n
label.padding = unit(0.15, "lines"), label.size = 0.4, size = 8) +
scale_y_continuous(limits = c(0, 1), breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +
labs(title=paste0("Predictive Accuracy of ", length(sigs), "-sig Chemogram"),
subtitle = paste0(nrow(scored_ranks_epi)," Cell Lines"),
y = "Predictive Accuracy", x = "Disease Site") +
theme_bw(base_size = 15) + #theme and sizing
theme(axis.text.y = element_text(size = 20),
axis.text.x = element_text(angle=30, size = 20, hjust=.9),
legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 10))
p2
ggsave(plot=p2,
filename=here("Plots", "Epithelial Cancers",
paste0(length(sigs), "sig_accuracy_boxplots_epi_gapdh.png")),
width = 15, height = 9) #save plot
#create a new df to store the rankings in
scores_sup = data.frame(matrix(nrow=0, ncol=(ncol(scores_long)+1)))
colnames(scores_sup) = c(colnames(scores_long), "rank")
#create a vector of all the cell lines to go through
cl_list = unique(scores_long$cell_line)
for(i in 1:length(cl_list)){
#for each cell line, sort by descending sig score (most to least sensitive)
temp = scores_long %>% filter(cell_line == cl_list[i])
temp = temp[order(temp$score, decreasing = TRUE),]
temp$rank = seq(1:nrow(temp)) #label the ranking from most to least sensitive
scores_sup = rbind(scores_sup, temp) #combine results with the previous iteration
}
rm(temp)
scores_sup = scores_sup %>%
filter(subtype != "UNCLASSIFIED") %>%
mutate(rank = factor(rank, ordered=TRUE,
levels = seq(1:length(sigs))))
#set some plotting parameters based on number of sigs used
if(length(sigs) <= 5){
plot_rows = 1
bar_n_displace = -10
bar_n_angle = 0
bar_n_size = 5
viol_n_displace = -0.03
col_values = c("#5f957d", "#406453", "#304b3e", "#203229", "#000000")[1:length(sigs)]
fill_values = c("#c1d7cd", "#8fb7a5", "#507c68", "#48705c", "#406453")[1:length(sigs)]
} else {
plot_rows = 2
bar_n_displace = -20
bar_n_angle = 45
bar_n_size = 4
viol_n_displace = -0.05
col_values = c("#5f957d", "#5f957d", "#5f957d", "#406453", "#406453",
"#406453", "#304b3e", "#203229", "#000000", "#000000")[1:length(sigs)]
fill_values = c("#fcfaf9", "#dae7e1", "#c1d7cd", "#a8c7b9", "#8fb7a5",
"#76a791","#5f957d", "#507c68", "#48705c", "#406453")[1:length(sigs)]
}
#make a funciton and list to label each facet with the full name per drug
sig_labels = list()
for(i in 1:length(sigs)){
sig_labels[[i]] = sig_drugs[i]
names(sig_labels)[i] = names(sigs)[i]
}
#make a function to label number of cell lines represented in each col
give.n <- function(x){
return(c(y = median(x)*1.05, label = length(x)))
# experiment with the multiplier to find the perfect position
}
ggplot(scores_sup, aes(x=rank)) +
geom_bar(position="dodge", col="#48705d", fill = "#6aa087") +
labs(title="Frequency of Prediction Rankings",
x="Sensitivity Ranking",
y="Number of Occurrences")+
facet_wrap(~drug_abbrev,
labeller=as_labeller(setNames(sig_drugs, names(sig_labels))),
nrow=plot_rows) +
stat_summary(fun.data = give.n, geom = "text", fun.y = median,
position = position_dodge(width = 0.75),
aes(y=bar_n_displace), size = 4, angle = bar_n_angle) +
theme_bw(base_size = 15) + #theme and sizing
theme(axis.text.y = element_text(size = 20),
axis.text.x = element_text(size = 20),
legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 10))
ggsave(here("Plots", paste0(length(sigs), "sig_prediction_freq_gapdh.png")),
width=15, height=8)
ggplot(scores_sup %>% filter(subtype %in% epi), aes(x=rank)) +
geom_bar(position="dodge", col="#48705d", fill = "#6aa087") +
labs(title="Frequency of Predicted Sensitivity Rankings",
subtitle = "in Epithelial Cancers",
x="Sensitivity Ranking",
y="Number of Occurrences")+
facet_wrap(~drug_abbrev,
labeller=as_labeller(setNames(sig_drugs, names(sig_labels))),
nrow=plot_rows) +
stat_summary(fun.data = give.n, geom = "text", fun.y = median,
position = position_dodge(width = 0.75),
aes(y=bar_n_displace), size = bar_n_size, angle = bar_n_angle) +
theme_bw(base_size = 15) + #theme and sizing
theme(axis.text.y = element_text(size = 20),
axis.text.x = element_text(size = 20),
legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 10))
ggsave(here("Plots", "Epithelial Cancers",
paste0(length(sigs), "sig_prediction_freq_epi_gapdh.png")),
width=15, height=8)
surv_sup = merge(scores_sup, fit_results,
by=c("cell_line", "subtype", "drug_abbrev"))
knitr::opts_chunk$set(echo = TRUE)
# devtools::install_github("cancerrxgene/gdscIC50", build_vignettes=FALSE) #restart R after downloading
library(here)
library(gdscIC50) #for cleaning and normalizing the raw drug response data
library(pheatmap) #for plotting survival and sig scores
library(gtools) #for generating the permutations/scoring table
library(plyr) #for match_df to get acc score from rank order
library(patchwork) #for plotting
library(tidyverse)
conflicted::conflict_prefer("here", "here")
conflicted::conflict_prefer("filter", "dplyr")
conflicted::conflict_prefer("mutate", "dplyr")
conflicted::conflict_prefer("select", "dplyr")
# exprs_norm_all = readRDS(here("Data", "normalized_exprs.rds")) #exprs data z-scores
exprs_norm = readRDS(here("Data", "normalized_exprs_to_gapdh.rds")) #exprs data norm to GAPDH
knitr::opts_chunk$set(echo = TRUE)
raw_exprs = readr::read_tsv(here("Data", "Raw Data", "Cell_line_RMA_proc_basalExp.txt"))
cell_lines = readRDS(here("Data", "cleaned_cell_line_meta.rds"))
subtype_key = readRDS(here("Data", "subtype_key.rds"))
#Change the column names from DATA.COSMIC ID to just COSMIC IDs (COSMIC = cell lines)
cols = colnames(raw_exprs) #store the column names as a vector
cols = as.data.frame(cols[-c(1:2)]) #Change cols vector to a data frame and remove the first two descriptor columns
colnames(cols) = "x" #the name of the column in cols is weird to reference, just change it to "x" for ease of reference
cols = cols %>%
separate(x, c("rm", "COSMIC_ID"), "DATA.") #split the values-- create 2 new columns: one with "DATA." and the other with the cosmic ID
cols = as.vector(cols$COSMIC_ID) #make the cols variable a vector of just the cosmic IDs
colnames(raw_exprs)[3:ncol(raw_exprs)] = cols #Set the column names of raw_exprs (minus the 2 descriptor columns) to be just the IDs
rm(cols) #Remove this variable now that we're done with it for cleanliness
#check that there arent duplicated genes- output should be NA and nothing else. If there is more, use the commented line below
#many of the duplicated genes are just "NA"s; rename them so R doesnt get confused
raw_exprs$GENE_SYMBOLS = raw_exprs$GENE_SYMBOLS %>% replace_na('UNCLASSIFIED')
dup_genes_gdsc = raw_exprs$GENE_SYMBOLS[c(which(duplicated(raw_exprs$GENE_SYMBOLS)==TRUE))]
ctrl = raw_exprs[which(raw_exprs$GENE_SYMBOLS=="GAPDH"),] #select just the gapdh exprs values
norm = raw_exprs #new df to replace w normalized vals
unique(colnames(norm) == colnames(ctrl)) #should just be TRUE
for(i in 3:ncol(raw_exprs)){
norm[,i] = norm[,i]/as.numeric(ctrl[,i]) #normalize all genes within samples
}
unique(as.vector(norm %>% filter(GENE_SYMBOLS=="GAPDH"))) #should only have 2 genes names and the number 1
plot_exprs_norm = pivot_longer(norm, #pivot to check
names_to = "COSMIC_ID",
values_to = "norm_exprs",
cols=-c("GENE_SYMBOLS", "GENE_title"))
range(plot_exprs_norm %>% filter(GENE_SYMBOLS=="GAPDH")%>%select(norm_exprs)) #compare ranges again
range(plot_exprs_norm %>%select(norm_exprs))
exprs_norm2 = pivot_wider(plot_exprs_norm %>% filter(GENE_SYMBOLS != "UNCLASSIFIED"), #format the same as the other norm exprs df
values_from = "norm_exprs",
names_from = "GENE_SYMBOLS",
id_cols="COSMIC_ID")
exprs_norm2 = exprs_norm2 %>% #order the columns alphabetically like the other norm exprs df
select(COSMIC_ID, sort(colnames(exprs_norm2[,-1])))
#Save
saveRDS(exprs_norm2, here("Data", "normalized_exprs_to_gapdh.rds"))
# exprs_norm_all = readRDS(here("Data", "normalized_exprs.rds")) #exprs data z-scores
exprs_norm = readRDS(here("Data", "normalized_exprs_to_gapdh.rds")) #exprs data norm to GAPDH
cell_lines = readRDS(here("Data", "cleaned_cell_line_meta.rds"))
subtype_key = readRDS(here("Data", "subtype_key.rds"))
# exprs_norm_all = readRDS(here("Data", "normalized_exprs.rds")) #exprs data z-scores
exprs_norm = readRDS(here("Data", "normalized_exprs_to_gapdh.rds")) #exprs data norm to GAPDH
sig_files = list.files(here("Data", "Signatures"))
sigs = lapply(sig_files, function(x) readRDS(here("Data", "Signatures", x)))
names(sigs) = gsub("\\_.*", "", sig_files) #cut off everything after the first underscore
## we also need the full drug names to match with the correct drug response data. those need to be manually entered in the *same order* as the list shows
#make sure theyre spelled right! can check the `drug_id_key` table for spelling
names(sigs) #print this to make sure the order is correct
sig_drugs = c("Cisplatin", "Cytarabine", "5-Fluorouracil", "Gemcitabine", "Irinotecan",
"Luminespib", "Paclitaxel", "Topotecan", "Vinblastine", "Vorinostat")
sigs[["cis"]] = c("LRRC8C", "LY6K", "MMP10","SLFN11", "STOML2","USP31","WDR3", "ZNF750")
sigs[["gem"]] = c("CRLF3", "MLKL", "POLR3G", "PROCR", "RELB", "SLFN11")
sigx = list()
View(sigs)
i=1
exprs_norm %>%
select(sigs[[i]]) %>%
filter(COSMIC_ID==1240121)
View(exprs_norm)
exprs_norm %>%
filter(COSMIC_ID==1240121) %>%
select(sigs[[i]])
t(exprs_norm %>%
filter(COSMIC_ID==1240121) %>%
select(sigs[[i]]))
t(exprs_norm %>%
filter(COSMIC_ID==1240121) %>%
select(sigs[[i]])) %>%
mutate(gene=rownames())
temp = t(exprs_norm %>%
filter(COSMIC_ID==1240121) %>%
select(sigs[[i]]))
temp$gene = rownames(temp)
temp
temp = t(exprs_norm %>%
filter(COSMIC_ID==1240121) %>%
select(sigs[[i]]))
View(temp)
rownames(temp)
temp$gene
temp$gene = rownames(temp)
temp = t(exprs_norm %>%
filter(COSMIC_ID==1240121) %>%
select(sigs[[i]]))
colnames(temp)
paste0(names(sigs[i]))
colnames(temp) = paste0(names(sigs[i]), "_norm")
temp
sigx[i] = t(exprs_norm %>%
filter(COSMIC_ID==1240121) %>%
select(sigs[[i]]))
colnames(sigx[i]) = paste0(names(sigs[i]), "_norm")
sigx[[i]] = t(exprs_norm %>%
filter(COSMIC_ID==1240121) %>%
select(sigs[[i]]))
colnames(sigx[i]) = paste0(names(sigs[i]), "_norm")
View(sigx)
colnames(sigx[[i]]) = paste0(names(sigs[i]), "_norm")
sigx[[1]]
sigx = list()
for(i in 1:10){
sigx[[i]] = t(exprs_norm %>%
filter(COSMIC_ID==1240121) %>%
select(sigs[[i]]))
colnames(sigx[[i]]) = paste0(names(sigs[i]), "_norm")
}
test = do.call(rbind, sigx)
View(test)
rm(test)
openxlsx::saveWorkbook(sigx, file=here("norm_example.xlsx"))
write_xlsx(sigx, file=here("norm_example.xlsx"))
write.xlsx(sigx, file=here("norm_example.xlsx"))
readxl::write.xlsx(sigx, file=here("norm_example.xlsx"))
openxlsx::write.xlsx(sigx, file=here("norm_example.xlsx"))
sigx = list()
for(i in 1:10){
sigx[[i]] = t(exprs_norm %>%
filter(COSMIC_ID==1240121) %>%
select(sigs[[i]]))
x = rownames(sigx[[i]])
colnames(sigx[[i]]) = paste0(names(sigs[i]), "_norm")
sigx[[i]]$gene = x
}
View(sigx)
i=1
sigx[[i]] = t(exprs_norm %>%
filter(COSMIC_ID==1240121) %>%
select(sigs[[i]]))
x = rownames(sigx[[i]])
colnames(sigx[[i]]) = paste0(names(sigs[i]), "_norm")
sigx[[i]] %>% mutate(gene = x)
six[[i]] = as.data.frame(sigx[[i]])
sigx[[i]] = as.data.frame(sigx[[i]])
sigx[[i]]$gene = x
sigx = list()
for(i in 1:10){
sigx[[i]] = t(exprs_norm %>%
filter(COSMIC_ID==1240121) %>%
select(sigs[[i]]))
x = rownames(sigx[[i]])
colnames(sigx[[i]]) = paste0(names(sigs[i]), "_norm")
sigx[[i]] = as.data.frame(sigx[[i]])
sigx[[i]]$gene = x
}
openxlsx::write.xlsx(sigx, file=here("norm_example.xlsx"))
alp <- readRDS("~/PhD/Projects/Sensitivity-Sigs/Results/mass-extraction 2/sig/alp/alp_intersect_sig_deCompPerc30_rmExtremePerc0_samPerm10000_multPerm1000_nFolds5.rds")
rm(alp)
e <- readRDS("~/PhD/Projects/Sensitivity-Sigs/Results/mass-extraction 2/sig/erlo/erlo_intersect_sig_deCompPerc30_rmExtremePerc0_samPerm10000_multPerm1000_nFolds5.rds")
rm(e)
e <- readRDS("~/PhD/Projects/Sensitivity-Sigs/Results/mass-extraction 2/sig/ibru/ibru_intersect_sig_deCompPerc30_rmExtremePerc0_samPerm10000_multPerm1000_nFolds5.rds")
rm(e)
e <- readRDS("~/PhD/Projects/Sensitivity-Sigs/Results/mass-extraction 2/sig/lap/lap_intersect_sig_deCompPerc30_rmExtremePerc0_samPerm10000_multPerm1000_nFolds5.rds")
w <- readRDS("~/PhD/Projects/Sensitivity-Sigs/Results/mass-extraction 2/sig/osi/osi_intersect_sig_deCompPerc30_rmExtremePerc0_samPerm10000_multPerm1000_nFolds5.rds")
rm(e, w)
e <- readRDS("~/PhD/Projects/Sensitivity-Sigs/Results/mass-extraction 2/sig/sel/sel_intersect_sig_deCompPerc30_rmExtremePerc0_samPerm10000_multPerm1000_nFolds5.rds")
