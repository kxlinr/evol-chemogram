e <- readRDS("~/PhD/Projects/Sensitivity-Sigs/Results/mass-extraction 2/sig/erlo/erlo_intersect_sig_deCompPerc30_rmExtremePerc0_samPerm10000_multPerm1000_nFolds5.rds")
rm(e)
e <- readRDS("~/PhD/Projects/Sensitivity-Sigs/Results/mass-extraction 2/sig/ibru/ibru_intersect_sig_deCompPerc30_rmExtremePerc0_samPerm10000_multPerm1000_nFolds5.rds")
rm(e)
e <- readRDS("~/PhD/Projects/Sensitivity-Sigs/Results/mass-extraction 2/sig/lap/lap_intersect_sig_deCompPerc30_rmExtremePerc0_samPerm10000_multPerm1000_nFolds5.rds")
w <- readRDS("~/PhD/Projects/Sensitivity-Sigs/Results/mass-extraction 2/sig/osi/osi_intersect_sig_deCompPerc30_rmExtremePerc0_samPerm10000_multPerm1000_nFolds5.rds")
rm(e, w)
e <- readRDS("~/PhD/Projects/Sensitivity-Sigs/Results/mass-extraction 2/sig/sel/sel_intersect_sig_deCompPerc30_rmExtremePerc0_samPerm10000_multPerm1000_nFolds5.rds")
knitr::opts_chunk$set(echo = TRUE)
# devtools::install_github("cancerrxgene/gdscIC50", build_vignettes=FALSE) #restart R after downloading
library(here)
library(gdscIC50) #for cleaning and normalizing the raw drug response data
library(pheatmap) #for plotting survival and sig scores
library(gtools) #for generating the permutations/scoring table
library(plyr) #for match_df to get acc score from rank order
library(patchwork) #for plotting
library(tidyverse)
conflicted::conflict_prefer("here", "here")
conflicted::conflict_prefer("filter", "dplyr")
conflicted::conflict_prefer("mutate", "dplyr")
conflicted::conflict_prefer("select", "dplyr")
cell_lines = readRDS(here("Data", "cleaned_cell_line_meta.rds"))
subtype_key = readRDS(here("Data", "subtype_key.rds"))
exprs_norm_all = readRDS(here("Data", "normalized_exprs.rds")) #exprs data z-scores
# exprs_norm = readRDS(here("Data", "normalized_exprs_to_gapdh.rds")) #exprs data norm to GAPDH
drug_id_key = readRDS(here("Data", "drug_id_key.rds"))
norm_dose_resp = readRDS(here("Data", "prepped_drug_resp.rds"))
cell_lines = readRDS(here("Data", "cleaned_cell_line_meta.rds"))
subtype_key = readRDS(here("Data", "subtype_key.rds"))
exprs_norm_all = readRDS(here("Data", "normalized_exprs.rds")) #exprs data z-scores
# exprs_norm = readRDS(here("Data", "normalized_exprs_to_gapdh.rds")) #exprs data norm to GAPDH
drug_id_key = readRDS(here("Data", "drug_id_key.rds"))
norm_dose_resp = readRDS(here("Data", "prepped_drug_resp.rds"))
exprs_norm_all = readRDS(here("Data", "normalized_exprs.rds")) #exprs data z-sc
rm(exprs_norm_all)
sig_files = list.files(here("Data", "Signatures"))
sigs = lapply(sig_files, function(x) readRDS(here("Data", "Signatures", x)))
names(sigs) = gsub("\\_.*", "", sig_files) #cut off everything after the first underscore
## we also need the full drug names to match with the correct drug response data. those need to be manually entered in the *same order* as the list shows
#make sure theyre spelled right! can check the `drug_id_key` table for spelling
names(sigs) #print this to make sure the order is correct
sig_drugs = c("Cisplatin", "Cytarabine", "5-Fluorouracil", "Gemcitabine", "Irinotecan",
"Luminespib", "Paclitaxel", "Topotecan", "Vinblastine", "Vorinostat")
rm(sig_files)
#Reload
scores=readRDS(here("Results",
paste0(length(sigs), "sig_scores.rds")))
scores = na.omit(scores)
scores_long = pivot_longer(scores,
cols = c(names(sigs)),
names_to = "drug_abbrev",
values_to = "score")
ggplot(scores_long, aes(x=score, col = drug_abbrev,)) +
geom_density(size=1) +
scale_color_manual(values = c("#9b2226","#f94149","#f3722c", "#f9c74f", "#90be6d",
"#43aa8b", "#277da1",  "#4361ee", "#7209b7", "#f72585")) +
labs(x="Sensitivity Score",
y="Frequency",
color="Drug",
title="Distribution of Signature-derived Sensitivity Scores",
subtitle = paste0(length(unique(scores_long$cell_line)), " Cell Lines"))
ggplot(scores_long, aes(x=drug_abbrev, y=score)) +
geom_violin() +
geom_boxplot(width=0.1) +
labs(title="Distribution of Signature-derived Sensitivity Scores",
subtitle = paste0(length(unique(scores_long$cell_line)), " Cell Lines"))
ggplot(scores_long, aes(x=drug_abbrev, y=score)) +
geom_violin() +
geom_boxplot(width=0.1) +
scale_color_manual(values = c("#9b2226","#f94149","#f3722c", "#f9c74f", "#90be6d",
"#43aa8b", "#277da1",  "#4361ee", "#7209b7", "#f72585")) +
labs(title="Distribution of Signature-derived Sensitivity Scores",
subtitle = paste0(length(unique(scores_long$cell_line)), " Cell Lines"))
ggplot(scores_long, aes(x=drug_abbrev, y=score)) +
geom_violin() +
geom_boxplot(width=0.1) +
scale_fill_manual(values = c("#9b2226","#f94149","#f3722c", "#f9c74f", "#90be6d",
"#43aa8b", "#277da1",  "#4361ee", "#7209b7", "#f72585")) +
labs(title="Distribution of Signature-derived Sensitivity Scores",
subtitle = paste0(length(unique(scores_long$cell_line)), " Cell Lines"))
cor.test(comp3$scores_gapdh[which(comp3$drug_abbrev=="cis")],
comp3$scores_z[which(comp3$drug_abbrev=="cis")],
method = 'spearman')
n = length(sigs)
scored_ranks = readRDS(here("Results", paste0(length(sigs),"sig_accuracy_scores.rds")))
View(scored_ranks)
View(cell_lines)
ccle = read_delim(here("Data", "ccle_annotations.txt"))
View(ccle)
scored_ranks %>% filter(subtype=="ESCA")
colnames(cell_lines)[2]
colnames(cell_lines)[2] = "cell_line"
left_join(scored_ranks, cell_lines, by= "cell_line")
cell_lines$cell_line = as.character(cell_lines$cell_line)
left_join(scored_ranks, cell_lines, by= "cell_line")
h = left_join(scored_ranks, cell_lines, by= "cell_line")
View(h)
View(h %>% filter(subtype=="ESCA"))
knitr::opts_chunk$set(echo = TRUE)
# devtools::install_github("cancerrxgene/gdscIC50", build_vignettes=FALSE) #restart R after downloading
library(here)
library(gdscIC50) #for cleaning and normalizing the raw drug response data
library(pheatmap) #for plotting survival and sig scores
library(gtools) #for generating the permutations/scoring table
library(plyr) #for match_df to get acc score from rank order
library(patchwork) #for plotting
library(tidyverse)
conflicted::conflict_prefer("here", "here")
conflicted::conflict_prefer("filter", "dplyr")
conflicted::conflict_prefer("mutate", "dplyr")
conflicted::conflict_prefer("select", "dplyr")
cell_lines = readRDS(here("Data", "cleaned_cell_line_meta.rds"))
subtype_key = readRDS(here("Data", "subtype_key.rds"))
exprs_norm = readRDS(here("Data", "normalized_exprs.rds")) #exprs data z-scores
# exprs_norm = readRDS(here("Data", "normalized_exprs_to_gapdh.rds")) #exprs data norm to GAPDH
drug_id_key = readRDS(here("Data", "drug_id_key.rds"))
norm_dose_resp = readRDS(here("Data", "prepped_drug_resp.rds"))
sig_files = list.files(here("Data", "Signatures"))
sigs = lapply(sig_files, function(x) readRDS(here("Data", "Signatures", x)))
names(sigs) = gsub("\\_.*", "", sig_files) #cut off everything after the first underscore
## we also need the full drug names to match with the correct drug response data. those need to be manually entered in the *same order* as the list shows
#make sure theyre spelled right! can check the `drug_id_key` table for spelling
names(sigs) #print this to make sure the order is correct
sig_drugs = c("Cisplatin", "Cytarabine", "5-Fluorouracil", "Gemcitabine", "Irinotecan",
"Luminespib", "Paclitaxel", "Topotecan", "Vinblastine", "Vorinostat")
rm(sig_files)
n = length(sigs)
#The more drugs there are, the longer it takes to run the code above.
#load the matrix in if it already exists to save time
acc_scores = readRDS(here("Results", paste0(length(sigs),"sig_score_table.rds")))
scored_ranks = readRDS(here("Results", paste0(length(sigs),"sig_accuracy_scores.rds")))
#all the values with NA had missing drug response data and should be excluded
nrow(scored_ranks)
scored_ranks_full = na.omit(scored_ranks) #986 to 759 for 3 sigs, 616 after rm unclassified cell lines
#968 to 670 for 10sig, 539 after rm unclass.
nrow(scored_ranks_full)
#create a new df with one row per subtype, and columns = subtype, proportion_correct
subtype = unique(scored_ranks_full$subtype)
subtype_scores = data.frame(subtype=subtype, accuracy=0, n = 0)
for (i in 1:length(subtype)){
#Subset data per subtype
subset = scored_ranks_full[which(scored_ranks_full$subtype == subtype[i]),]
#Store subtype name
subtype_scores$subtype[i] = subtype[i]
#calc and store % of cell line survivals correctly predicted
subtype_scores$accuracy[i] = round((sum(subset$accuracy)/nrow(subset)), digits=3)
#Indicate number of cell lines in subtype (n)
subtype_scores$n[i] = nrow(subset)
}
#order the rows by highest to lowest correct
subtype_scores = subtype_scores[order(subtype_scores$accuracy),]
#To maintain this order when we plot later, factorize the column
subtype_scores$subtype <- factor(subtype_scores$subtype,
ordered = TRUE,
levels = subtype_scores$subtype)
#remove unclassified cell lines
scored_ranks_full = scored_ranks_full %>% filter(subtype != "UNCLASSIFIED")
#Set order to = subtype_scores
cancer_order = (as.character(subtype_scores$subtype))[-c(which(as.character(subtype_scores$subtype)=="UNCLASSIFIED"))]
scored_ranks_full$subtype <- factor(scored_ranks_full$subtype,
ordered = TRUE,
levels = c(cancer_order))
scored_ranks_full = scored_ranks_full[order(scored_ranks_full$subtype),]
#remove unclassified from subtype score averages
subtype_scores$subtype <- factor(subtype_scores$subtype,
ordered = TRUE,
levels = c(cancer_order))
subtype_scores = subtype_scores[order(subtype_scores$subtype),]
#save
# saveRDS(scored_ranks_full, here("Results", paste0(length(sigs),"sig_accuracy_scores_cleaned.rds")))
epi = c("HNSC", "ESCA", "BRCA",
"COREAD", "LIHC", #"ACC", #leave this out bc it only has one cell line
"STAD", "KIRC", "LUAD",
"LUSC","MESO",
"PAAD", "THCA", "BLCA",
"CESC", "UCEC", "OV", "PRAD")
scored_ranks_epi = scored_ranks_full %>%
filter(subtype %in% epi)
subtype_scores_epi = subtype_scores %>%
filter(subtype %in% epi)
#create a new df to store the rankings in
scores_sup = data.frame(matrix(nrow=0, ncol=(ncol(scores_long)+1)))
View(scored_ranks_full)
library(here)
library(plyr) #for match_df to get acc score from rank order
library(see) #for the half violins
library(tidyverse)
conflicted::conflict_prefer("here", "here")
conflicted::conflict_prefer("filter", "dplyr")
conflicted::conflict_prefer("mutate", "dplyr")
conflicted::conflict_prefer("select", "dplyr")
#if running locally, use this
n_sigs = 10
# Load Sigs
sig_files = list.files(here("Data", "Signatures"))
sigs = lapply(sig_files, function(x) readRDS(here("Data", "Signatures", x)))
names(sigs) = gsub("\\_.*", "", sig_files)
names(sigs)
sig_drugs = c("Cisplatin", "Cytarabine", "5-Fluorouracil", "Gemcitabine", "Irinotecan",
"Luminespib", "Paclitaxel", "Topotecan", "Vinblastine", "Vorinostat")
rm(sig_files)
if(n_sigs == 3){
#just the 3
sigs = sigs[c(1,3,4)]
sig_drugs=sig_drugs[c(1,3,4)]
print(sig_drugs)
} else {
print(sig_drugs)
}
scored_ranks = readRDS(here("Results",
paste0(length(sigs),"sig_accuracy_scores.rds"))) %>%
mutate(s_score = accuracy) %>%
select(-accuracy)
chemogram_results = na.omit(left_join(fit_results, scored_ranks, by="cell_line"))
# Load Chemogram Results
fit_results = readRDS(here("Results",
paste0(length(sigs), "sig_nlme_fitted_data.rds")))
chemogram_results = na.omit(left_join(fit_results, scored_ranks, by="cell_line"))
unique(chemogram_results$subtype.x==chemogram_results$subtype.y) #double check this is true
chemogram_results = chemogram_results %>%
mutate(subtype=subtype.x) %>%
select(-subtype.x, -subtype.y)
## Run bootstrap
n=1000
#reload bootstrap data
boot_results_all = readRDS(here("Results", paste0("null_", n, "_bootstrap_",
length(sigs), "sig_indiv_scores.rds")))
boot_subtype_results = readRDS(here("Results", paste0("null_", n, "_bootstrap_",
length(sigs), "sig_subtype_scores.rds")))
################################################################################
# Reformat Chemogram Data
#create a new df with one row per subtype, and columns = subtype, proportion_correct
subtype = unique(scored_ranks$subtype)
subtype_scores = data.frame(subtype=subtype, accuracy=0, n = 0)
for (i in 1:length(subtype)){
#Subset data per subtype
subset = na.omit(scored_ranks[which(scored_ranks$subtype == subtype[i]),])
#Store subtype name
subtype_scores$subtype[i] = subtype[i]
#calc and store % of cell line survivals correctly predicted
subtype_scores$accuracy[i] = round((sum(subset$s_score)/nrow(subset)), digits=3)
#Indicate number of cell lines in subtype (n)
subtype_scores$n[i] = nrow(subset)
}
rm(subset)
chemogram_results = chemogram_results %>% filter(subtype != "UNCLASSIFIED") #-131
scored_ranks = na.omit(scored_ranks) %>% filter(subtype != "UNCLASSIFIED") #0
boot_results_all = boot_results_all %>% filter(subtype != "UNCLASSIFIED") #-130
boot_subtype_results = boot_subtype_results %>% filter(subtype != "UNCLASSIFIED")
subtype_scores = subtype_scores %>% filter(subtype != "UNCLASSIFIED")
#order the rows by highest to lowest correct
subtype_scores = subtype_scores[order(subtype_scores$accuracy),]
#To maintain this order when we plot later, factorize the column
subtype_scores$subtype <- factor(subtype_scores$subtype,
ordered = TRUE,
levels = subtype_scores$subtype)
#Set order to = subtype_scores
cancer_order = (as.character(subtype_scores$subtype))
scored_ranks$subtype <- factor(scored_ranks$subtype,
ordered = TRUE,
levels = c(cancer_order))
scored_ranks = scored_ranks[order(scored_ranks$subtype),]
subtype_scores$subtype <- factor(subtype_scores$subtype,
ordered = TRUE,
levels = c(cancer_order))
subtype_scores = subtype_scores[order(subtype_scores$subtype),]
boot_results_all$subtype <- factor(boot_results_all$subtype,
ordered = TRUE,
levels = cancer_order)
boot_results_all = boot_results_all[order(boot_results_all$subtype),]
boot_subtype_results$subtype <- factor(boot_subtype_results$subtype,
ordered = TRUE,
levels = cancer_order)
boot_subtype_results = boot_subtype_results[order(boot_subtype_results$subtype),]
#random prediction acc scores are uniformly distributed
boot_results_all$accuracy = as.numeric(boot_results_all$n_accuracy)
ggplot(boot_results_all, aes(x=accuracy)) +
geom_histogram()
epi = c("HNSC", "ESCA", "BRCA",
"COREAD", "LIHC", #"ACC", #leave this out bc it only has one cell line
"STAD", "KIRC", "LUAD",
"LUSC","MESO",
"PAAD", "THCA", "BLCA",
"CESC", "UCEC", "OV", "PRAD")
#t.test b/w null and real
p_epi = t.test(plot_null_epi$`Predictive Accuracy`, plot_real_epi$`Predictive Accuracy`)
half_box_data = boot_results_all %>% #label all the null results
mutate(`Prediction Method`="Random Signatures") %>%
mutate(accuracy = n_accuracy) %>%
select(-run, -s_accuracy, -n_accuracy, -surv, -drug)
half_box_data_temp = scored_ranks %>%
mutate(`Prediction Method`=paste0(length(sigs), "-sig Chemogram"),
accuracy = s_score) %>%
select(-s_score)
half_box_data = rbind(half_box_data, half_box_data_temp)
rm(half_box_data_temp)
half_box_data$subtype <- factor(half_box_data$subtype,
ordered = TRUE,
levels = cancer_order)
half_box_data$accuracy = as.numeric(half_box_data$accuracy)
plot_null = as.data.frame(boot_results_all %>% select(n_accuracy))
plot_null$`Prediction Method` = "Random Signatures"
colnames(plot_null)[1] = "Predictive Accuracy"
plot_null$`Predictive Accuracy` = as.numeric(plot_null$`Predictive Accuracy`)
plot_real = as.data.frame(scored_ranks$s_score)
plot_real$`Prediction Method` = paste0(length(sigs), "-sig Chemogram")
colnames(plot_real)[1] = "Predictive Accuracy"
#t.test b/w null and real
p=t.test(plot_null$`Predictive Accuracy`, plot_real$`Predictive Accuracy`)
View(p)
View(p)
##Plot
ggplot(plot_null, aes(x=`Prediction Method`, y=`Predictive Accuracy`)) +
geom_violin(fill = "#a8dadc") +
geom_boxplot(width = 0.15, fatten=NULL) +
geom_violin(data=plot_real, aes(x=`Prediction Method`, y=`Predictive Accuracy`), fill="#e63946") +
geom_boxplot(data=plot_real, aes(x=`Prediction Method`, y=`Predictive Accuracy`),
width = 0.15, fatten=NULL) +
stat_summary(fun = mean, geom = "errorbar",
aes(ymax = ..y.., ymin = ..y.., group=`Prediction Method`), #add in a line to indicate the mean
width = 0.15, size = 1, linetype = "solid",
position=position_dodge(preserve="total")) +
stat_summary(data=plot_real, fun = mean, geom = "errorbar",
aes(ymax = ..y.., ymin = ..y.., group=`Prediction Method`), #add in a line to indicate the mean
width = 0.15, size = 1, linetype = "solid",
position=position_dodge(preserve="total")) +
annotate("text", x = 1.5, y = 1.05, label = paste0("t-test: p = ", round(p[["p.value"]], 6)), size = 5) +
labs(title = paste0("Predictive Accuracy of Random Signatures vs ", length(sigs), "-sig Chemogram"), #titles and axis labels
subtitle = paste0(length(unique(chemogram_results$cell_line))," Cell Lines, ", n, " Bootstrap Iterations"),
y = "Predictive Accuracy", x = "Prediction Method") +
theme_bw(base_size = 15) + #theme and sizing
theme(axis.text.y = element_text(size = 20),
axis.text.x = element_text(size = 20),
legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 10))
#random prediction acc scores are uniformly distributed
boot_results_all$accuracy = as.numeric(boot_results_all$n_accuracy)
half_box_data_epi = half_box_data %>% filter(subtype %in% epi)
subtype_scores_epi = subtype_scores %>% filter(subtype %in% epi)
scored_ranks_full_epi = scored_ranks %>% filter(subtype %in% epi)
boot_subtype_scores_epi = boot_subtype_results %>% filter(subtype %in% epi)
boot_results_epi = boot_results_all %>% filter(subtype %in% epi)
cancer_order_epi = subtype_scores_epi$subtype
half_box_data_epi$subtype <- factor(half_box_data_epi$subtype,
ordered = TRUE,
levels = cancer_order_epi)
subtype_scores_epi$subtype <- factor(subtype_scores_epi$subtype,
ordered = TRUE,
levels = cancer_order_epi)
scored_ranks_full_epi$subtype <- factor(scored_ranks_full_epi$subtype,
ordered = TRUE,
levels = cancer_order_epi)
boot_subtype_scores_epi$subtype <- factor(boot_subtype_scores_epi$subtype,
ordered = TRUE,
levels = cancer_order_epi)
boot_results_epi$subtype <- factor(boot_results_epi$subtype,
ordered = TRUE,
levels = cancer_order_epi)
plot_null_epi = boot_results_epi %>%
select(n_accuracy)
plot_null_epi$`Prediction Method` = "Random Signatures"
colnames(plot_null_epi)[1] = "Predictive Accuracy"
plot_null_epi$`Predictive Accuracy` = as.numeric(plot_null_epi$`Predictive Accuracy`)
plot_real_epi = as.data.frame(scored_ranks_full_epi$s_score)
plot_real_epi$`Prediction Method` = "10-sig Chemogram"
colnames(plot_real_epi)[1] = "Predictive Accuracy"
# plot violins with mean red points
boot_subtype_scores_epi$accuracy = as.numeric(boot_subtype_scores_epi$n_accuracy)
# Significance tests
all_p = as.data.frame(matrix(nrow=length(cancer_order), ncol=2))
colnames(all_p) = c("subtype", "p_val")
class(boot_results_all$n_accuracy) = "numeric"
View(boot_results_all)
for(i in 1:length(cancer_order)){
type = cancer_order[i]
if(nrow(boot_results_all %>% filter(subtype == type)) > 1 & nrow(scored_ranks %>% filter(subtype == type)) > 1){
result = t.test(x=(boot_results_all[which(boot_results_all$subtype==type), "n_accuracy"]),
y=(scored_ranks[which(scored_ranks$subtype==type), "s_score"]),
paired=FALSE, alternative="two.sided")
all_p$subtype[i] = type
all_p$p_val[i] = result$p.value
} else {
all_p$subtype[i] = type
all_p$p_val[i] = NA
}
}
View(all_p)
i=1
nrow(boot_results_all %>% filter(subtype == type)) > 1
nrow(scored_ranks %>% filter(subtype == type)) > 1
all_p = all_p %>%
mutate(class = case_when(subtype %in% epi ~ "epi",
TRUE ~ "non-epi"))
all_p = all_p[order(all_p$p_val, decreasing=FALSE),]
epi_p = all_p %>% filter(subtype %in% epi)
write_excel_csv(all_p, here("Results",
paste0("null", n, "_",
length(sigs), "_pvals.xlsx")))
#if running locally, use this
n_sigs = 3
# Load Sigs
sig_files = list.files(here("Data", "Signatures"))
sigs = lapply(sig_files, function(x) readRDS(here("Data", "Signatures", x)))
names(sigs) = gsub("\\_.*", "", sig_files)
names(sigs)
sig_drugs = c("Cisplatin", "Cytarabine", "5-Fluorouracil", "Gemcitabine", "Irinotecan",
"Luminespib", "Paclitaxel", "Topotecan", "Vinblastine", "Vorinostat")
rm(sig_files)
if(n_sigs == 3){
#just the 3
sigs = sigs[c(1,3,4)]
sig_drugs=sig_drugs[c(1,3,4)]
print(sig_drugs)
} else {
print(sig_drugs)
}
# Load Chemogram Results
fit_results = readRDS(here("Results",
paste0(length(sigs), "sig_nlme_fitted_data.rds")))
scored_ranks = readRDS(here("Results",
paste0(length(sigs),"sig_accuracy_scores.rds"))) %>%
mutate(s_score = accuracy) %>%
select(-accuracy)
chemogram_results = na.omit(left_join(fit_results, scored_ranks, by="cell_line"))
unique(chemogram_results$subtype.x==chemogram_results$subtype.y) #double check this is true
chemogram_results = chemogram_results %>%
mutate(subtype=subtype.x) %>%
select(-subtype.x, -subtype.y)
## Run bootstrap
n=1000
boot_results_all = readRDS(here("Results", paste0("null_", n, "_bootstrap_",
length(sigs), "sig_indiv_scores.rds")))
boot_subtype_results = readRDS(here("Results", paste0("null_", n, "_bootstrap_",
length(sigs), "sig_subtype_scores.rds")))
subtype = unique(scored_ranks$subtype)
subtype_scores = data.frame(subtype=subtype, accuracy=0, n = 0)
for (i in 1:length(subtype)){
#Subset data per subtype
subset = na.omit(scored_ranks[which(scored_ranks$subtype == subtype[i]),])
#Store subtype name
subtype_scores$subtype[i] = subtype[i]
#calc and store % of cell line survivals correctly predicted
subtype_scores$accuracy[i] = round((sum(subset$s_score)/nrow(subset)), digits=3)
#Indicate number of cell lines in subtype (n)
subtype_scores$n[i] = nrow(subset)
}
rm(subset)
#remove unclassified cell lines
chemogram_results = chemogram_results %>% filter(subtype != "UNCLASSIFIED") #-131
scored_ranks = na.omit(scored_ranks) %>% filter(subtype != "UNCLASSIFIED") #0
boot_results_all = boot_results_all %>% filter(subtype != "UNCLASSIFIED") #-130
boot_subtype_results = boot_subtype_results %>% filter(subtype != "UNCLASSIFIED")
subtype_scores = subtype_scores %>% filter(subtype != "UNCLASSIFIED")
#order the rows by highest to lowest correct
subtype_scores = subtype_scores[order(subtype_scores$accuracy),]
#To maintain this order when we plot later, factorize the column
subtype_scores$subtype <- factor(subtype_scores$subtype,
ordered = TRUE,
levels = subtype_scores$subtype)
#Set order to = subtype_scores
cancer_order = (as.character(subtype_scores$subtype))
scored_ranks$subtype <- factor(scored_ranks$subtype,
ordered = TRUE,
levels = c(cancer_order))
scored_ranks = scored_ranks[order(scored_ranks$subtype),]
#reorder cancer types
subtype_scores$subtype <- factor(subtype_scores$subtype,
ordered = TRUE,
levels = c(cancer_order))
subtype_scores = subtype_scores[order(subtype_scores$subtype),]
boot_results_all$subtype <- factor(boot_results_all$subtype,
ordered = TRUE,
levels = cancer_order)
boot_results_all = boot_results_all[order(boot_results_all$subtype),]
boot_subtype_results$subtype <- factor(boot_subtype_results$subtype,
ordered = TRUE,
levels = cancer_order)
boot_subtype_results = boot_subtype_results[order(boot_subtype_results$subtype),]
epi = c("HNSC", "ESCA", "BRCA",
"COREAD", "LIHC", #"ACC", #leave this out bc it only has one cell line
"STAD", "KIRC", "LUAD",
"LUSC","MESO",
"PAAD", "THCA", "BLCA",
"CESC", "UCEC", "OV", "PRAD")
# Significance tests
all_p = as.data.frame(matrix(nrow=length(cancer_order), ncol=2))
colnames(all_p) = c("subtype", "p_val")
class(boot_results_all$n_accuracy) = "numeric"
for(i in 1:length(cancer_order)){
type = cancer_order[i]
if(nrow(boot_results_all %>% filter(subtype == type)) > 1 & nrow(scored_ranks %>% filter(subtype == type)) > 1){
result = t.test(x=(boot_results_all[which(boot_results_all$subtype==type), "n_accuracy"]),
y=(scored_ranks[which(scored_ranks$subtype==type), "s_score"]),
paired=FALSE, alternative="two.sided")
all_p$subtype[i] = type
all_p$p_val[i] = result$p.value
} else {
all_p$subtype[i] = type
all_p$p_val[i] = NA
}
}
all_p = all_p %>%
mutate(class = case_when(subtype %in% epi ~ "epi",
TRUE ~ "non-epi"))
all_p = all_p[order(all_p$p_val, decreasing=FALSE),]
epi_p = all_p %>% filter(subtype %in% epi)
View(all_p)
write_excel_csv(all_p, here("Results",
paste0("null", n, "_",
length(sigs), "_pvals.xlsx")))
