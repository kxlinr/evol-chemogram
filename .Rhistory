axis.text.x = element_text(size = 20, angle=30, hjust=0.9),
legend.position = "top",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 15))
ggsave(here("Plots", "Epithelial Cancers",
paste0("null", n, "_", length(sigs),"sig_halfbox_epi.png")),
width=15, height=9)
plot_null_epi = boot_results_epi %>%
select(n_accuracy)
plot_null_epi$`Prediction Method` = "Random Signatures"
colnames(plot_null_epi)[1] = "Predictive Accuracy"
plot_null_epi$`Predictive Accuracy` = as.numeric(plot_null_epi$`Predictive Accuracy`)
plot_real_epi = as.data.frame(scored_ranks_full_epi$s_score)
plot_real_epi$`Prediction Method` = "10-sig Chemogram"
colnames(plot_real_epi)[1] = "Predictive Accuracy"
#t.test b/w null and real
p_epi = t.test(plot_null_epi$`Predictive Accuracy`, plot_real_epi$`Predictive Accuracy`)
##Plot
ggplot(plot_null_epi, aes(x=`Prediction Method`, y=`Predictive Accuracy`)) +
geom_violin(fill = "#a8dadc") +
geom_boxplot(width = 0.15, fatten=NULL) +
geom_violin(data=plot_real_epi, aes(x=`Prediction Method`, y=`Predictive Accuracy`), fill="#e63946") +
geom_boxplot(data=plot_real_epi, aes(x=`Prediction Method`, y=`Predictive Accuracy`),
width = 0.15, fatten=NULL) +
stat_summary(fun = mean, geom = "errorbar",
aes(ymax = ..y.., ymin = ..y.., group=`Prediction Method`), #add in a line to indicate the mean
width = 0.15, size = 1, linetype = "solid",
position=position_dodge(preserve="total")) +
stat_summary(data=plot_real_epi, fun = mean, geom = "errorbar",
aes(ymax = ..y.., ymin = ..y.., group=`Prediction Method`), #add in a line to indicate the mean
width = 0.15, size = 1, linetype = "solid",
position=position_dodge(preserve="total")) +
annotate("text", x = 1.5, y = 1, label = paste0("t-test: p = ", round(p_epi[["p.value"]], 6)), size = 5) +
labs(title = paste0("Predictive Accuracy of Random Signatures vs ",length(sigs),"-sig Chemogram"), #titles and axis labels
subtitle = paste0(nrow(scored_ranks_full_epi)," Epithelial Cell Lines, ", n, " Bootstrap Iterations"),
y = "Predictive Accuracy", x = "Prediction Method") +
theme_bw(base_size = 15) + #theme and sizing
theme(axis.text.y = element_text(size = 20),
axis.text.x = element_text(size = 20),
legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 10))
p_epi[["p.value"]]
##Plot
ggplot(plot_null_epi, aes(x=`Prediction Method`, y=`Predictive Accuracy`)) +
geom_violin(fill = "#a8dadc") +
geom_boxplot(width = 0.15, fatten=NULL) +
geom_violin(data=plot_real_epi, aes(x=`Prediction Method`, y=`Predictive Accuracy`), fill="#e63946") +
geom_boxplot(data=plot_real_epi, aes(x=`Prediction Method`, y=`Predictive Accuracy`),
width = 0.15, fatten=NULL) +
stat_summary(fun = mean, geom = "errorbar",
aes(ymax = ..y.., ymin = ..y.., group=`Prediction Method`), #add in a line to indicate the mean
width = 0.15, size = 1, linetype = "solid",
position=position_dodge(preserve="total")) +
stat_summary(data=plot_real_epi, fun = mean, geom = "errorbar",
aes(ymax = ..y.., ymin = ..y.., group=`Prediction Method`), #add in a line to indicate the mean
width = 0.15, size = 1, linetype = "solid",
position=position_dodge(preserve="total")) +
annotate("text", x = 1.5, y = 1, label = paste0("t-test: p = ", round(p_epi[["p.value"]], 8)), size = 5) +
labs(title = paste0("Predictive Accuracy of Random Signatures vs ",length(sigs),"-sig Chemogram"), #titles and axis labels
subtitle = paste0(nrow(scored_ranks_full_epi)," Epithelial Cell Lines, ", n, " Bootstrap Iterations"),
y = "Predictive Accuracy", x = "Prediction Method") +
theme_bw(base_size = 15) + #theme and sizing
theme(axis.text.y = element_text(size = 20),
axis.text.x = element_text(size = 20),
legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 10))
##Plot
ggplot(plot_null_epi, aes(x=`Prediction Method`, y=`Predictive Accuracy`)) +
geom_violin(fill = "#a8dadc") +
geom_boxplot(width = 0.15, fatten=NULL) +
geom_violin(data=plot_real_epi, aes(x=`Prediction Method`, y=`Predictive Accuracy`), fill="#e63946") +
geom_boxplot(data=plot_real_epi, aes(x=`Prediction Method`, y=`Predictive Accuracy`),
width = 0.15, fatten=NULL) +
stat_summary(fun = mean, geom = "errorbar",
aes(ymax = ..y.., ymin = ..y.., group=`Prediction Method`), #add in a line to indicate the mean
width = 0.15, size = 1, linetype = "solid",
position=position_dodge(preserve="total")) +
stat_summary(data=plot_real_epi, fun = mean, geom = "errorbar",
aes(ymax = ..y.., ymin = ..y.., group=`Prediction Method`), #add in a line to indicate the mean
width = 0.15, size = 1, linetype = "solid",
position=position_dodge(preserve="total")) +
annotate("text", x = 1.5, y = 1, label = paste0("t-test: p = ", round(p_epi[["p.value"]], 9)), size = 5) +
labs(title = paste0("Predictive Accuracy of Random Signatures vs ",length(sigs),"-sig Chemogram"), #titles and axis labels
subtitle = paste0(nrow(scored_ranks_full_epi)," Epithelial Cell Lines, ", n, " Bootstrap Iterations"),
y = "Predictive Accuracy", x = "Prediction Method") +
theme_bw(base_size = 15) + #theme and sizing
theme(axis.text.y = element_text(size = 20),
axis.text.x = element_text(size = 20),
legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 10))
ggsave(here("Plots", "Epithelial Cancers",
paste0("null", n, "_", length(sigs),"sig_violins_epi.png")),
width = 15, height = 9) #save plot
# plot violins with mean red points
boot_subtype_scores_epi$accuracy = as.numeric(boot_subtype_scores_epi$n_accuracy)
ggplot(data=boot_subtype_scores_epi, aes(x=subtype, y=accuracy)) +
geom_violin(fill="#71AEC1", trim=FALSE, alpha=1) +
geom_boxplot(width=0.1) +
geom_point(data=subtype_scores_epi, aes(x=subtype, y=accuracy), color="#e63946", size=5, alpha = 0.9) +
geom_label(data=subtype_scores_epi, aes(x=subtype, y = 0, label = n),
label.padding = unit(0.15, "lines"), label.size = 0.4, size = 8) +
#coord_flip() +
scale_y_continuous(limits=c(0,1), breaks = c(0,0.25,.5,.75,1))+
labs(title = paste0("Predictive Accuracy of Random Signatures vs ",length(sigs),"-sig Chemogram"), #titles and axis labels
subtitle = paste0(nrow(scored_ranks_full_epi)," Cell Lines, ", n, " Bootstrap Iterations"),
y = "Average Predictive Accuracy", x = "Disease Site") +
theme_bw(base_size = 15) + #theme and sizing
theme(axis.text.y = element_text(size = 20),
axis.text.x = element_text(size = 20, angle=30, hjust=0.9),
legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 10))
ggsave(here("Plots", "Epithelial Cancers",
paste0("null", n, "_", length(sigs),"sig_halfbox_avgs_epi.png")),
width = 15, height = 9) #save plot
# Significance tests
all_p = as.data.frame(matrix(nrow=length(cancer_order), ncol=2))
colnames(all_p) = c("subtype", "p_val")
class(boot_results_all$n_accuracy) = "numeric"
for(i in 1:length(cancer_order)){
type = cancer_order[i]
if(nrow(boot_results_all %>% filter(subtype == type)) > 1 & nrow(scored_ranks %>% filter(subtype == type)) > 1){
result = t.test(x=(boot_results_all[which(boot_results_all$subtype==type), "n_accuracy"]),
y=(scored_ranks[which(scored_ranks$subtype==type), "s_score"]),
paired=FALSE, alternative="two.sided")
all_p$subtype[i] = type
all_p$p_val[i] = result$p.value
} else {
all_p$subtype[i] = type
all_p$p_val[i] = NA
}
}
all_p = all_p %>%
mutate(class = case_when(subtype %in% epi ~ "epi",
TRUE ~ "non-epi"))
all_p = all_p[order(all_p$p_val, decreasing=FALSE),]
epi_p = all_p %>% filter(subtype %in% epi)
write_excel_csv(all_p, here("Results",
paste0("null", n, "_",
length(sigs), "_pvals.xlsx")))
#if running locally, use this
n_sigs = 3
if(n_sigs == 3){
#just the 3
sigs = sigs[c(1,3,4)]
sig_drugs=sig_drugs[c(1,3,4)]
print(sig_drugs)
} else {
print(sig_drugs)
}
# Load Chemogram Results
fit_results = readRDS(here("Results",
paste0(length(sigs), "sig_nlme_fitted_data.rds")))
scored_ranks = readRDS(here("Results",
paste0(length(sigs),"sig_accuracy_scores.rds"))) %>%
mutate(s_score = accuracy) %>%
select(-accuracy)
chemogram_results = na.omit(left_join(fit_results, scored_ranks, by="cell_line"))
unique(chemogram_results$subtype.x==chemogram_results$subtype.y) #double check this is true
chemogram_results = chemogram_results %>%
mutate(subtype=subtype.x) %>%
select(-subtype.x, -subtype.y)
## Run bootstrap
n=1000
#reload bootstrap data
boot_results_all = readRDS(here("Results", paste0("null_", n, "_bootstrap_",
length(sigs), "sig_indiv_scores.rds")))
boot_subtype_results = readRDS(here("Results", paste0("null_", n, "_bootstrap_",
length(sigs), "sig_subtype_scores.rds")))
subtype = unique(scored_ranks$subtype)
subtype_scores = data.frame(subtype=subtype, accuracy=0, n = 0)
for (i in 1:length(subtype)){
#Subset data per subtype
subset = na.omit(scored_ranks[which(scored_ranks$subtype == subtype[i]),])
#Store subtype name
subtype_scores$subtype[i] = subtype[i]
#calc and store % of cell line survivals correctly predicted
subtype_scores$accuracy[i] = round((sum(subset$s_score)/nrow(subset)), digits=3)
#Indicate number of cell lines in subtype (n)
subtype_scores$n[i] = nrow(subset)
}
rm(subset)
#remove unclassified cell lines
chemogram_results = chemogram_results %>% filter(subtype != "UNCLASSIFIED") #-131
scored_ranks = na.omit(scored_ranks) %>% filter(subtype != "UNCLASSIFIED") #0
boot_results_all = boot_results_all %>% filter(subtype != "UNCLASSIFIED") #-130
boot_subtype_results = boot_subtype_results %>% filter(subtype != "UNCLASSIFIED")
subtype_scores = subtype_scores %>% filter(subtype != "UNCLASSIFIED")
#order the rows by highest to lowest correct
subtype_scores = subtype_scores[order(subtype_scores$accuracy),]
#To maintain this order when we plot later, factorize the column
subtype_scores$subtype <- factor(subtype_scores$subtype,
ordered = TRUE,
levels = subtype_scores$subtype)
#Set order to = subtype_scores
cancer_order = (as.character(subtype_scores$subtype))
scored_ranks$subtype <- factor(scored_ranks$subtype,
ordered = TRUE,
levels = c(cancer_order))
scored_ranks = scored_ranks[order(scored_ranks$subtype),]
#reorder cancer types
subtype_scores$subtype <- factor(subtype_scores$subtype,
ordered = TRUE,
levels = c(cancer_order))
subtype_scores = subtype_scores[order(subtype_scores$subtype),]
boot_results_all$subtype <- factor(boot_results_all$subtype,
ordered = TRUE,
levels = cancer_order)
boot_results_all = boot_results_all[order(boot_results_all$subtype),]
boot_subtype_results$subtype <- factor(boot_subtype_results$subtype,
ordered = TRUE,
levels = cancer_order)
boot_subtype_results = boot_subtype_results[order(boot_subtype_results$subtype),]
# Plots
## Reformat Data
half_box_data = boot_results_all %>% #label all the null results
mutate(`Prediction Method`="Random Signatures") %>%
mutate(accuracy = n_accuracy) %>%
select(-run, -s_accuracy, -n_accuracy, -surv, -drug)
half_box_data_temp = scored_ranks %>%
mutate(`Prediction Method`=paste0(length(sigs), "-sig Chemogram"),
accuracy = s_score) %>%
select(-s_score)
half_box_data = rbind(half_box_data, half_box_data_temp)
rm(half_box_data_temp)
half_box_data$subtype <- factor(half_box_data$subtype,
ordered = TRUE,
levels = cancer_order)
half_box_data$accuracy = as.numeric(half_box_data$accuracy)
## Plot Half-boxplot beeswarms
ggplot(data=half_box_data, aes(x=subtype, y=accuracy)) +
geom_boxplot(width=0.6, aes(fill=`Prediction Method`, col=`Prediction Method`), alpha=0.8, fatten=NULL) +
stat_summary(fun = mean, geom = "errorbar",
aes(ymax = ..y.., ymin = ..y.., group=`Prediction Method`, col=`Prediction Method`), #add in a line to indicate the mean
width = 0.6, size = 1.5, linetype = "solid",
position=position_dodge(preserve="total")) +
scale_fill_manual(values=c("#e63946", "#a8dadc")) + #change boxplot color
scale_color_manual(values=c("#6a040f", "#03045e")) + #change mean bar color
geom_label(data=subtype_scores, aes(x = subtype, y = 0, label = n), #add n
label.padding = unit(0.15, "lines"), label.size = 0.4, size = 8) +
scale_y_continuous(limits=c(0,1), breaks = c(0,0.25,.5,.75,1))+ #set y axis breaks
scale_x_discrete(limits = cancer_order) +
labs(title = paste0("Predictive Accuracy of Random Signatures vs ",length(sigs),"-sig Chemogram"), #titles and axis labels
subtitle = paste0(length(unique(half_box_data$cell_line))," Cell Lines, ", n, " Bootstrap Iterations"),
y = "Predictive Accuracy", x = "Disease Site") +
theme_bw(base_size = 15) + #theme and sizing
theme(axis.text.y = element_text(size = 20),
axis.text.x = element_text(size = 20, angle=30, hjust=0.9),
legend.position = "top",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 15))
ggsave(here("Plots", paste0("null", n, "_", length(sigs),"sig_halfbox.png")),
width=15, height=9)
plot_null = as.data.frame(boot_results_all %>% select(n_accuracy))
plot_null$`Prediction Method` = "Random Signatures"
colnames(plot_null)[1] = "Predictive Accuracy"
plot_null$`Predictive Accuracy` = as.numeric(plot_null$`Predictive Accuracy`)
plot_real = as.data.frame(scored_ranks$s_score)
plot_real$`Prediction Method` = paste0(length(sigs), "-sig Chemogram")
colnames(plot_real)[1] = "Predictive Accuracy"
#t.test b/w null and real
p=t.test(plot_null$`Predictive Accuracy`, plot_real$`Predictive Accuracy`)
##Plot
ggplot(plot_null, aes(x=`Prediction Method`, y=`Predictive Accuracy`)) +
geom_violin(fill = "#a8dadc") +
geom_boxplot(width = 0.15, fatten=NULL) +
geom_violin(data=plot_real, aes(x=`Prediction Method`, y=`Predictive Accuracy`), fill="#e63946") +
geom_boxplot(data=plot_real, aes(x=`Prediction Method`, y=`Predictive Accuracy`),
width = 0.15, fatten=NULL) +
stat_summary(fun = mean, geom = "errorbar",
aes(ymax = ..y.., ymin = ..y.., group=`Prediction Method`), #add in a line to indicate the mean
width = 0.15, size = 1, linetype = "solid",
position=position_dodge(preserve="total")) +
stat_summary(data=plot_real, fun = mean, geom = "errorbar",
aes(ymax = ..y.., ymin = ..y.., group=`Prediction Method`), #add in a line to indicate the mean
width = 0.15, size = 1, linetype = "solid",
position=position_dodge(preserve="total")) +
annotate("text", x = 1.5, y = 1.05, label = paste0("t-test: p = ", round(p[["p.value"]], 6)), size = 5) +
labs(title = paste0("Predictive Accuracy of Random Signatures vs ", length(sigs), "-sig Chemogram"), #titles and axis labels
subtitle = paste0(length(unique(chemogram_results$cell_line))," Cell Lines, ", n, " Bootstrap Iterations"),
y = "Predictive Accuracy", x = "Prediction Method") +
theme_bw(base_size = 15) + #theme and sizing
theme(axis.text.y = element_text(size = 20),
axis.text.x = element_text(size = 20),
legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 10))
ggsave(here("Plots", paste0("null", n, "_", length(sigs),"sig_violins.png")),
width = 15, height = 9) #save plot
#random prediction acc scores are uniformly distributed
boot_results_all$accuracy = as.numeric(boot_results_all$n_accuracy)
ggplot(boot_results_all, aes(x=accuracy)) +
geom_histogram()
# plot violins with mean red points
ggplot(data=boot_subtype_results, aes(x=subtype, y=n_accuracy)) +
geom_violin(fill="#71AEC1", trim=FALSE, alpha=1) +
geom_boxplot(width=0.1) +
geom_point(data=subtype_scores, aes(x=subtype, y=accuracy), color="#e63946", size=5, alpha = 0.9) +
geom_label(data=subtype_scores, aes(x=subtype, y = 0, label = n),
label.padding = unit(0.15, "lines"), label.size = 0.4, size = 8) +
#coord_flip() +
scale_y_continuous(limits=c(0,1), breaks = c(0,0.25,.5,.75,1))+
labs(title = paste0("Predictive Accuracy of Random Signatures vs ",length(sigs),"-sig Chemogram"), #titles and axis labels
subtitle = paste0(length(unique(chemogram_results$cell_line))," Cell Lines, ", n, " Bootstrap Iterations"),
y = "Average Predictive Accuracy", x = "Disease Site") +
theme_bw(base_size = 15) + #theme and sizing
theme(axis.text.y = element_text(size = 20),
axis.text.x = element_text(size = 20, angle=30, hjust=0.9),
legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 10))
ggsave(here("Plots", paste0("null", n, "_", length(sigs),"sig_halfbox_avgs.png")),
width = 15, height = 9) #save plot
## Reformat to Plot Epithelial Cancers Only
epi = c("HNSC", "ESCA", "BRCA",
"COREAD", "LIHC", #"ACC", #leave this out bc it only has one cell line
"STAD", "KIRC", "LUAD",
"LUSC","MESO",
"PAAD", "THCA", "BLCA",
"CESC", "UCEC", "OV", "PRAD")
half_box_data_epi = half_box_data %>% filter(subtype %in% epi)
subtype_scores_epi = subtype_scores %>% filter(subtype %in% epi)
scored_ranks_full_epi = scored_ranks %>% filter(subtype %in% epi)
boot_subtype_scores_epi = boot_subtype_results %>% filter(subtype %in% epi)
boot_results_epi = boot_results_all %>% filter(subtype %in% epi)
cancer_order_epi = subtype_scores_epi$subtype
half_box_data_epi$subtype <- factor(half_box_data_epi$subtype,
ordered = TRUE,
levels = cancer_order_epi)
subtype_scores_epi$subtype <- factor(subtype_scores_epi$subtype,
ordered = TRUE,
levels = cancer_order_epi)
scored_ranks_full_epi$subtype <- factor(scored_ranks_full_epi$subtype,
ordered = TRUE,
levels = cancer_order_epi)
boot_subtype_scores_epi$subtype <- factor(boot_subtype_scores_epi$subtype,
ordered = TRUE,
levels = cancer_order_epi)
boot_results_epi$subtype <- factor(boot_results_epi$subtype,
ordered = TRUE,
levels = cancer_order_epi)
## Plot epi
ggplot(data=half_box_data_epi, aes(x=subtype, y=accuracy)) +
geom_boxplot(width=0.6, aes(fill=`Prediction Method`, col=`Prediction Method`), alpha=0.8, fatten=NULL) +
stat_summary(fun = mean, geom = "errorbar",
aes(ymax = ..y.., ymin = ..y.., group=`Prediction Method`, col=`Prediction Method`), #add in a line to indicate the mean
width = 0.6, size = 1.5, linetype = "solid",
position=position_dodge(preserve="total")) +
scale_fill_manual(values=c("#e63946", "#a8dadc")) + #change boxplot color
scale_color_manual(values=c("#6a040f", "#03045e")) + #change mean bar color
geom_label(data=subtype_scores_epi, aes(x = subtype, y = 0, label = n), #add n
label.padding = unit(0.15, "lines"), label.size = 0.4, size = 8) +
scale_y_continuous(limits=c(0,1), breaks = c(0,0.25,.5,.75,1))+ #set y axis breaks
scale_x_discrete(limits = cancer_order_epi) +
labs(title = paste0("Predictive Accuracy of Random Signatures vs ",length(sigs),"-sig Chemogram"), #titles and axis labels
subtitle = paste0(length(unique(half_box_data_epi$cell_line))," Epithelial Cell Lines, ", n, " Bootstrap Iterations"),
y = "Predictive Accuracy", x = "Disease Site") +
theme_bw(base_size = 15) + #theme and sizing
theme(axis.text.y = element_text(size = 20),
axis.text.x = element_text(size = 20, angle=30, hjust=0.9),
legend.position = "top",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 15))
ggsave(here("Plots", "Epithelial Cancers",
paste0("null", n, "_", length(sigs),"sig_halfbox_epi.png")),
width=15, height=9)
#Plot all results w/o subtype categorization
##Format data to plot
plot_null_epi = boot_results_epi %>%
select(n_accuracy)
plot_null_epi$`Prediction Method` = "Random Signatures"
colnames(plot_null_epi)[1] = "Predictive Accuracy"
plot_null_epi$`Predictive Accuracy` = as.numeric(plot_null_epi$`Predictive Accuracy`)
plot_real_epi = as.data.frame(scored_ranks_full_epi$s_score)
plot_real_epi$`Prediction Method` = "10-sig Chemogram"
colnames(plot_real_epi)[1] = "Predictive Accuracy"
#t.test b/w null and real
p_epi = t.test(plot_null_epi$`Predictive Accuracy`, plot_real_epi$`Predictive Accuracy`)
##Plot
ggplot(plot_null_epi, aes(x=`Prediction Method`, y=`Predictive Accuracy`)) +
geom_violin(fill = "#a8dadc") +
geom_boxplot(width = 0.15, fatten=NULL) +
geom_violin(data=plot_real_epi, aes(x=`Prediction Method`, y=`Predictive Accuracy`), fill="#e63946") +
geom_boxplot(data=plot_real_epi, aes(x=`Prediction Method`, y=`Predictive Accuracy`),
width = 0.15, fatten=NULL) +
stat_summary(fun = mean, geom = "errorbar",
aes(ymax = ..y.., ymin = ..y.., group=`Prediction Method`), #add in a line to indicate the mean
width = 0.15, size = 1, linetype = "solid",
position=position_dodge(preserve="total")) +
stat_summary(data=plot_real_epi, fun = mean, geom = "errorbar",
aes(ymax = ..y.., ymin = ..y.., group=`Prediction Method`), #add in a line to indicate the mean
width = 0.15, size = 1, linetype = "solid",
position=position_dodge(preserve="total")) +
annotate("text", x = 1.5, y = 1, label = paste0("t-test: p = ", round(p_epi[["p.value"]], 9)), size = 5) +
labs(title = paste0("Predictive Accuracy of Random Signatures vs ",length(sigs),"-sig Chemogram"), #titles and axis labels
subtitle = paste0(nrow(scored_ranks_full_epi)," Epithelial Cell Lines, ", n, " Bootstrap Iterations"),
y = "Predictive Accuracy", x = "Prediction Method") +
theme_bw(base_size = 15) + #theme and sizing
theme(axis.text.y = element_text(size = 20),
axis.text.x = element_text(size = 20),
legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 10))
ggsave(here("Plots", "Epithelial Cancers",
paste0("null", n, "_", length(sigs),"sig_violins_epi.png")),
width = 15, height = 9) #save plot
# plot violins with mean red points
boot_subtype_scores_epi$accuracy = as.numeric(boot_subtype_scores_epi$n_accuracy)
ggplot(data=boot_subtype_scores_epi, aes(x=subtype, y=accuracy)) +
geom_violin(fill="#71AEC1", trim=FALSE, alpha=1) +
geom_boxplot(width=0.1) +
geom_point(data=subtype_scores_epi, aes(x=subtype, y=accuracy), color="#e63946", size=5, alpha = 0.9) +
geom_label(data=subtype_scores_epi, aes(x=subtype, y = 0, label = n),
label.padding = unit(0.15, "lines"), label.size = 0.4, size = 8) +
#coord_flip() +
scale_y_continuous(limits=c(0,1), breaks = c(0,0.25,.5,.75,1))+
labs(title = paste0("Predictive Accuracy of Random Signatures vs ",length(sigs),"-sig Chemogram"), #titles and axis labels
subtitle = paste0(nrow(scored_ranks_full_epi)," Cell Lines, ", n, " Bootstrap Iterations"),
y = "Average Predictive Accuracy", x = "Disease Site") +
theme_bw(base_size = 15) + #theme and sizing
theme(axis.text.y = element_text(size = 20),
axis.text.x = element_text(size = 20, angle=30, hjust=0.9),
legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 10))
ggsave(here("Plots", "Epithelial Cancers",
paste0("null", n, "_", length(sigs),"sig_halfbox_avgs_epi.png")),
width = 15, height = 9) #save plot
# Significance tests
all_p = as.data.frame(matrix(nrow=length(cancer_order), ncol=2))
colnames(all_p) = c("subtype", "p_val")
class(boot_results_all$n_accuracy) = "numeric"
for(i in 1:length(cancer_order)){
type = cancer_order[i]
if(nrow(boot_results_all %>% filter(subtype == type)) > 1 & nrow(scored_ranks %>% filter(subtype == type)) > 1){
result = t.test(x=(boot_results_all[which(boot_results_all$subtype==type), "n_accuracy"]),
y=(scored_ranks[which(scored_ranks$subtype==type), "s_score"]),
paired=FALSE, alternative="two.sided")
all_p$subtype[i] = type
all_p$p_val[i] = result$p.value
} else {
all_p$subtype[i] = type
all_p$p_val[i] = NA
}
}
all_p = all_p %>%
mutate(class = case_when(subtype %in% epi ~ "epi",
TRUE ~ "non-epi"))
all_p = all_p[order(all_p$p_val, decreasing=FALSE),]
epi_p = all_p %>% filter(subtype %in% epi)
write_excel_csv(all_p, here("Results",
paste0("null", n, "_",
length(sigs), "_pvals.xlsx")))
knitr::opts_chunk$set(echo = TRUE)
raw_exprs = readr::read_tsv(here("Data", "Raw Data", "Cell_line_RMA_proc_basalExp.txt"))
library(here)
library(gdscIC50) #for cleaning and normalizing the raw drug response data
library(tidyverse)
conflicted::conflict_prefer("select", "dplyr")
conflicted::conflict_prefer("filter", "dplyr")
raw_exprs = readr::read_tsv(here("Data", "Raw Data", "Cell_line_RMA_proc_basalExp.txt"))
View(raw_exprs)
raw_exprs = raw_exprs %>% select(GENE_SYMBOLS, DATA.1240121)
knitr::opts_chunk$set(echo = TRUE)
sig_files = list.files(here("Data", "Signatures"))
sigs = lapply(sig_files, function(x) readRDS(here("Data", "Signatures", x)))
names(sigs) = gsub("\\_.*", "", sig_files) #cut off everything after the first underscore
## we also need the full drug names to match with the correct drug response data. those need to be manually entered in the *same order* as the list shows
#make sure theyre spelled right! can check the `drug_id_key` table for spelling
names(sigs) #print this to make sure the order is correct
sig_drugs = c("Cisplatin", "Cytarabine", "5-Fluorouracil", "Gemcitabine", "Irinotecan",
"Luminespib", "Paclitaxel", "Topotecan", "Vinblastine", "Vorinostat")
rm(sig_files)
View(sigs)
sig_vec = vector()
sig_vec = sapply(sigs, append,sig_vec)
View(sig_vec)
sig_vec = sapply(sigs, c, sig_vec)
rm(sig_vec)
sig_vec=vector()
sig_vec=unlist(sigs)
sig_vec=vector()
sig_vec = Reduce(c, sigs)
raw_exprs = raw_exprs %>% filter(GENE_SYMBOLS %in% sig_vec)
exprs_norm = readRDS(here("Data", "normalized_exprs.rds"))
View(exprs_norm)
exprs_norm = exprs_norm[2,] %>% select(sig_vec)
exprs_norm  = as.data.frame(t(exprs_norm))
exprs_norm$gene = rownames(exprs_norm)
colnames(exprs_norm)[1]
colnames(exprs_norm)[1] = "exprs_norm"
values = cbind(raw_exprs, exprs_norm)
View(values)
colnames(raw_exprs)
colnames(raw_exprs) = c("gene", "exprs_raw")
values = merge(raw_exprs, exprs_norm, by="gene")
write.xlsx(values, here("method_values_10sig.xlsx"))
openxlsx::write.xlsx(values, here("method_values_10sig.xlsx"))
