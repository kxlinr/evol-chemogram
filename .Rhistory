print(sig_drugs)
}
# Load Expression Data
exprs_norm = readRDS(here("Data", "normalized_exprs.rds"))
# Load Chemogram Results
ranks = readRDS(here("Results", "bin_ic50_ranks.rds"))
sig_results = readRDS(here("Results", "bin_ic50_results.rds"))
# Bootstrap
## Helper Functions
### Generate Null Signatures
set_null_sigs = function(n, i, sigs, exprs){
#set seed to n + i so its different each bootstrap iteration
set.seed(n+i)
#initialize list to store null sigs in
null_sigs = list()
#for each of the 10 sigs, take length and randomly select genes from colnames of exprs_norm[,-1]
for(j in 1:length(sigs)){
null_sigs[[j]] = sample(colnames(exprs)[2:ncol(exprs)], size = length(sigs[[j]]),
replace = FALSE, prob = NULL)
names(null_sigs)[j] = names(sigs)[j]
}
return(null_sigs)
}
### Generate Sig Scores
calc_sig_score = function(cl_surv, exprs, null_sigs){
#loop through all cell lines in `survivals_full`
cl = unique(cl_surv$cell_line)
#initialize column to store null sig scores
cl_surv = cl_surv %>% #just using this df as a structural base, dont need this info
select(-rank, -dif, -abs_dif)
cl_surv$n_score=NA #initialize a column to store null sig scores in
#isolate row for the cell line
for(j in 1:length(cl)){
# print(j)
exprs_subset = exprs %>%
filter(COSMIC_ID==cl[j])
if(nrow(exprs_subset) != 0){ #make sure there is expression data for the cell line
#calc sig score for each of the 10 drugs
if(table(cl_surv$cell_line)[j]==length(sigs)){ #make sure there are results for 10 drugs, no less
for(k in 1:length(null_sigs)){
#select just the columns with the sig genes
exprs_sig_subset = exprs_subset[colnames(exprs_subset) %in% null_sigs[[k]]]
#calc sig score (median of expression z-score)
cl_surv$n_score[(cl_surv$cell_line==cl[j] &
cl_surv$drug_abbrev==names(null_sigs)[k])] = as.numeric(apply(exprs_sig_subset, 1, median))
}#repeat for all 10 sigs
} else {
for(k in 1:length(null_sigs)){
cl_surv$n_score[(cl_surv$cell_line==cl[j] &
cl_surv$drug==names(null_sigs)[k])] = NA
}
}
} else {
for(k in 1:length(null_sigs)){
cl_surv$n_score[(cl_surv$cell_line==cl[j] &
cl_surv$drug==names(null_sigs)[k])] = NA
}
}
}#repeat for all cell lines
return(cl_surv)
}
### Calculate Accuracy Score
calc_acc_score = function(n_scores, run_num){
#initialize the column to store accuracy of null-sig chemogram
n_scores = na.omit(n_scores)
n_scores$n_rank = NA
cl = unique(n_scores$cell_line)
results = data.frame(matrix(nrow=length(cl),
ncol=5))
colnames(results) = c("cell_line", "subtype",
"av_dif", "av_abs_dif",
"run")
#loop through 1 cell line at a time and subset data for each per loop iteration
for(j in 1:length(cl)){
n_scores_subset = n_scores %>% filter(cell_line==cl[j])
#set DF in order of highest to lowest null score
n_scores_subset = n_scores_subset[order(n_scores_subset$n_score, decreasing=TRUE),]
#make column of n_rank and number from 1:10
n_scores_subset$n_rank = seq(1:length(sigs))
#score
n_scores_subset = n_scores_subset %>%
mutate(dif = ntile-n_rank,
abs_dif = abs(ntile-n_rank))
#store results
results$cell_line[j] = cl[j]
results$subtype[j] = unique(n_scores_subset$subtype)
results$av_dif[j] = mean(n_scores_subset$dif)
results$av_abs_dif[j] = mean(n_scores_subset$abs_dif)
}#reiterate for each cell line
results$run = run_num
return(results)
}
## Wrapper function
sig_bootstrap = function(n, i, sigs, exprs, cl_surv, acc_results, acc_scores){
print(paste("Generating null sigs for run", i))
null_sigs = set_null_sigs(n, i, sigs, exprs)
print(paste("Calculating null sig scores for run", i))
n_sig_scores = calc_sig_score(cl_surv, exprs, null_sigs)
print(paste("Calculating null accuracy scores for run", i))
scored_boot = calc_acc_score(n_scores=n_sig_scores, run_num=i)
return(scored_boot)
}
## Run bootstrap
n=1000
for(i in 1:n){
print(i)
if(i == 1){
boot_results = sig_bootstrap(n, i,
sigs=sigs,
exprs=exprs_norm,
cl_surv=ranks)
boot_results_all = boot_results
} else {
boot_results = sig_bootstrap(n, i,
sigs=sigs,
exprs=exprs_norm,
cl_surv=ranks)
boot_results_all = rbind(boot_results_all, boot_results)
}
rm(boot_results)
} #next iteration, i of n
saveRDS(boot_results_all, here("Results", paste0("null_", n, "_binic50_bootstrap_",
length(sigs), "sig_indiv_scores.rds")))
saveRDS(boot_subtype_results, here("Results", paste0("null_", n, "_binic50_bootstrap_",
length(sigs), "sig_subtype_scores.rds")))
# Calculate subtype average scores
subtype_vec = unique(boot_results_all$subtype)
boot_subtype_scores = data.frame(matrix(ncol=4, nrow=(n)))
colnames(boot_subtype_scores) = c("subtype", "n_accuracy", "s_accuracy", "run")
for(i in 1:length(subtype_vec)){ #go through each subtype
result_subset = boot_results_all %>%
filter(subtype==as.character(subtype_vec[i]))
for(j in 1:n){ #go through each bootstrap run
result_subset_run = result_subset %>%
filter(run==j)
boot_subtype_scores$subtype[j] = as.character(subtype_vec[i])
boot_subtype_scores$run[j] = j
boot_subtype_scores$n_accuracy[j] = mean(as.numeric(result_subset_run$n_accuracy))
boot_subtype_scores$s_accuracy[j] = mean(result_subset_run$s_accuracy)
}
if(i==1){
boot_subtype_results = boot_subtype_scores
} else {
boot_subtype_results = rbind(boot_subtype_results, boot_subtype_scores)
}
}
View(boot_subtype_results)
View(boot_results_all)
View(boot_subtype_scores)
View(boot_subtype_results)
View(boot_subtype_results)
# Calculate subtype average scores
subtype_vec = unique(boot_results_all$subtype)
library(here)
library(plyr) #for match_df to get acc score from rank order
library(see) #for the half violins
library(tidyverse)
conflicted::conflict_prefer("here", "here")
conflicted::conflict_prefer("filter", "dplyr")
conflicted::conflict_prefer("mutate", "dplyr")
conflicted::conflict_prefer("select", "dplyr")
colnames(boot_subtype_scores) = c("subtype", "av_dif", "av_abs_dif", "run")
mean(boot_results_all$av_abs_dif)
for(i in 1:length(subtype_vec)){ #go through each subtype
result_subset = boot_results_all %>%
filter(subtype==as.character(subtype_vec[i]))
for(j in 1:n){ #go through each bootstrap run
result_subset_run = result_subset %>%
filter(run==j)
boot_subtype_scores$subtype[j] = as.character(subtype_vec[i])
boot_subtype_scores$run[j] = j
boot_subtype_scores$av_dif[j] = mean(result_subset_run$av_dif)
boot_subtype_scores$av_abs_dif[j] = mean(result_subset_run$av_abs_dif)
}
if(i==1){
boot_subtype_results = boot_subtype_scores
} else {
boot_subtype_results = rbind(boot_subtype_results, boot_subtype_scores)
}
}
View(boot_subtype_results)
i=1
colnames(boot_subtype_scores) = c("subtype", "av_dif", "av_abs_dif", "run")
result_subset = boot_results_all %>%
filter(subtype==as.character(subtype_vec[i]))
View(result_subset)
View(result_subset_run)
j=1
result_subset_run = result_subset %>%
filter(run==j)
boot_subtype_scores$av_dif[j] =
mean(result_subset_run$av_dif)
mean(result_subset_run$av_abs_dif)
j=2
result_subset_run = result_subset %>%
filter(run==j)
mean(result_subset_run$av_abs_dif)
mean(result_subset_run$av_dif)
colnames(boot_subtype_scores) = c("subtype", "av_dif", "av_abs_dif", "run")
library(here)
library(see) #for the half violins
library(tidyverse)
conflicted::conflict_prefer("here", "here")
conflicted::conflict_prefer("filter", "dplyr")
conflicted::conflict_prefer("mutate", "dplyr")
conflicted::conflict_prefer("select", "dplyr")
View(boot_subtype_results)
View(sig_results)
subtype_scores = data.frame(matrix(ncol=4, nrow=(length(subtype_vec))))
i=1
sig_subset = sig_results %>%
filter(subtype==as.character(subtype_vec[i]))
View(sig_subset)
# Calculate subtype average scores
subtype_vec = unique(boot_results_all$subtype)
boot_subtype_scores = data.frame(matrix(ncol=4, nrow=(n)))
colnames(boot_subtype_scores) = c("subtype", "av_dif", "av_abs_dif", "run")
subtype_scores = data.frame(matrix(ncol=4, nrow=(length(subtype_vec))))
colnames(subtype_scores) = c("subtype", "av_dif", "av_abs_dif")
for(i in 1:length(subtype_vec)){ #go through each subtype
boot_subset = boot_results_all %>%
filter(subtype==as.character(subtype_vec[i]))
sig_subset = sig_results %>%
filter(subtype==as.character(subtype_vec[i]))
subtype_scores$subtype[j] = as.character(subtype_vec[i])
subtype_scores$av_dif[j] = mean(sig_subset$av_dif)
subtype_scores$av_abs_dif[j] = mean(sig_subset_run$av_abs_dif)
for(j in 1:n){ #go through each bootstrap run
boot_subset_subset_run = boot_subset %>%
filter(run==j)
boot_subtype_scores$subtype[j] = as.character(subtype_vec[i])
boot_subtype_scores$run[j] = j
boot_subtype_scores$av_dif[j] = mean(boot_subset_subset_run$av_dif)
boot_subtype_scores$av_abs_dif[j] = mean(boot_subset_subset_run$av_abs_dif)
}
if(i==1){
boot_subtype_results = boot_subtype_scores
} else {
boot_subtype_results = rbind(boot_subtype_results, boot_subtype_scores)
}
}
subtype_scores = data.frame(matrix(ncol=3, nrow=(length(subtype_vec))))
colnames(subtype_scores) = c("subtype", "av_dif", "av_abs_dif")
for(i in 1:length(subtype_vec)){ #go through each subtype
boot_subset = boot_results_all %>%
filter(subtype==as.character(subtype_vec[i]))
sig_subset = sig_results %>%
filter(subtype==as.character(subtype_vec[i]))
subtype_scores$subtype[j] = as.character(subtype_vec[i])
subtype_scores$av_dif[j] = mean(sig_subset$av_dif)
subtype_scores$av_abs_dif[j] = mean(sig_subset$av_abs_dif)
for(j in 1:n){ #go through each bootstrap run
boot_subset_subset_run = boot_subset %>%
filter(run==j)
boot_subtype_scores$subtype[j] = as.character(subtype_vec[i])
boot_subtype_scores$run[j] = j
boot_subtype_scores$av_dif[j] = mean(boot_subset_subset_run$av_dif)
boot_subtype_scores$av_abs_dif[j] = mean(boot_subset_subset_run$av_abs_dif)
}
if(i==1){
boot_subtype_results = boot_subtype_scores
} else {
boot_subtype_results = rbind(boot_subtype_results, boot_subtype_scores)
}
}
subtype_scores = data.frame(matrix(ncol=3, nrow=(length(unique(sig_results$subtype)))))
colnames(subtype_scores) = c("subtype", "av_dif", "av_abs_dif")
for(i in 1:length(subtype_vec)){ #go through each subtype
boot_subset = boot_results_all %>%
filter(subtype==as.character(subtype_vec[i]))
sig_subset = sig_results %>%
filter(subtype==as.character(subtype_vec[i]))
subtype_scores$subtype[j] = as.character(subtype_vec[i])
subtype_scores$av_dif[j] = mean(sig_subset$av_dif)
subtype_scores$av_abs_dif[j] = mean(sig_subset$av_abs_dif)
for(j in 1:n){ #go through each bootstrap run
boot_subset_subset_run = boot_subset %>%
filter(run==j)
boot_subtype_scores$subtype[j] = as.character(subtype_vec[i])
boot_subtype_scores$run[j] = j
boot_subtype_scores$av_dif[j] = mean(boot_subset_subset_run$av_dif)
boot_subtype_scores$av_abs_dif[j] = mean(boot_subset_subset_run$av_abs_dif)
}
if(i==1){
boot_subtype_results = boot_subtype_scores
} else {
boot_subtype_results = rbind(boot_subtype_results, boot_subtype_scores)
}
}
boot_subtype_scores = data.frame(matrix(ncol=4, nrow=(n)))
colnames(boot_subtype_scores) = c("subtype", "av_dif", "av_abs_dif", "run")
for(i in 1:length(subtype_vec)){ #go through each subtype
boot_subset = boot_results_all %>%
filter(subtype==as.character(subtype_vec[i]))
for(j in 1:n){ #go through each bootstrap run
boot_subset_subset_run = boot_subset %>%
filter(run==j)
boot_subtype_scores$subtype[j] = as.character(subtype_vec[i])
boot_subtype_scores$run[j] = j
boot_subtype_scores$av_dif[j] = mean(boot_subset_subset_run$av_dif)
boot_subtype_scores$av_abs_dif[j] = mean(boot_subset_subset_run$av_abs_dif)
}
if(i==1){
boot_subtype_results = boot_subtype_scores
} else {
boot_subtype_results = rbind(boot_subtype_results, boot_subtype_scores)
}
}
boot_subtype_results = readRDS(here("Results", paste0("null_", n, "_binic50_bootstrap_",
length(sigs), "sig_subtype_scores.rds")))
################################################################################
# Reformat Chemogram Data
#calculate score averages per subtype
subtype_scores = data.frame(matrix(ncol=3, nrow=(length(unique(sig_results$subtype)))))
colnames(subtype_scores) = c("subtype", "av_dif", "av_abs_dif")
subtype_vec = unique(sig_results$subtype)
for(i in 1:length(subtype_vec)){
sig_subset = sig_results %>%
filter(subtype==as.character(subtype_vec[i]))
subtype_scores$subtype[i] = as.character(subtype_vec[i])
subtype_scores$av_dif[i] = mean(sig_subset$av_dif)
subtype_scores$av_abs_dif[i] = mean(sig_subset$av_abs_dif)
}
rm(sig_subset, subtype_vec)
View(subtype_scores)
rm(boot_subset, boot_subset_subset_run, boot_subtype_scores)
saveRDS(boot_results_all, here("Results", paste0("null_", n, "_binic50_bootstrap_",
length(sigs), "sig_indiv_scores.rds")))
n=2
exprs=exprs_norm
cl_surv=ranks
i=1
null_sigs = set_null_sigs(n, i, sigs, exprs)
View(null_sigs)
View(sigs)
n_sig_scores = calc_sig_score(cl_surv, exprs, null_sigs)
View(n_sig_scores)
n_scores=n_sig_scores
run_num=i
#initialize the column to store accuracy of null-sig chemogram
n_scores = na.omit(n_scores)
n_scores$n_rank = NA
View(n_scores)
cl = unique(n_scores$cell_line)
results = data.frame(matrix(nrow=length(cl),
ncol=5))
colnames(results) = c("cell_line", "subtype",
"av_dif", "av_abs_dif",
"run")
j=1
n_scores_subset = n_scores %>% filter(cell_line==cl[j])
View(n_scores_subset)
#set DF in order of highest to lowest null sig score
n_scores_subset = n_scores_subset[order(n_scores_subset$n_score, decreasing=TRUE),]
View(n_scores_subset)
#make column of n_rank and number from 1:10
n_scores_subset$n_rank = seq(1:length(sigs))
View(n_scores_subset)
#score
n_scores_subset = n_scores_subset %>%
mutate(dif = ntile-n_rank,
abs_dif = abs(ntile-n_rank))
View(n_scores_subset)
mean(n_scores_subset$dif)
mean(n_scores_subset$abs_dif)
View(ranks)
mean(3,2,-2,0,-4,0,-4,-5,-8)
n_scores_subset$dif
mean(3,0,-2,0,-4,-5, 0,-4,-5,-8)
mean(n_scores_subset$dif)
mean(paste(n_scores_subset$dif))
mean(as.numeric(n_scores_subset$dif))
View(sig_results)
View(n_scores_subset)
View(ranks)
View(results)
#score
n_scores_subset = n_scores_subset %>%
mutate(dif = ntile-n_rank,
abs_dif = abs(ntile-n_rank))
#store results
results$cell_line[j] = cl[j]
results$subtype[j] = unique(n_scores_subset$subtype)
results$av_dif[j] = mean(n_scores_subset$dif)
results$av_abs_dif[j] = mean(n_scores_subset$abs_dif)
View(results)
## Run bootstrap
n=1000
#reload bootstrap data
boot_results_all = readRDS(here("Results", paste0("null_", n, "_binic50_bootstrap_",
length(sigs), "sig_indiv_scores.rds")))
# Calculate subtype average scores
subtype_vec = unique(boot_results_all$subtype)
boot_subtype_scores = data.frame(matrix(ncol=4, nrow=(n)))
colnames(boot_subtype_scores) = c("subtype", "av_dif", "av_abs_dif", "run")
for(i in 1:length(subtype_vec)){ #go through each subtype
boot_subset = boot_results_all %>%
filter(subtype==as.character(subtype_vec[i]))
for(j in 1:n){ #go through each bootstrap run
boot_subset_subset_run = boot_subset %>%
filter(run==j)
boot_subtype_scores$subtype[j] = as.character(subtype_vec[i])
boot_subtype_scores$run[j] = j
boot_subtype_scores$av_dif[j] = mean(boot_subset_subset_run$av_dif)
boot_subtype_scores$av_abs_dif[j] = mean(boot_subset_subset_run$av_abs_dif)
}
if(i==1){
boot_subtype_results = boot_subtype_scores
} else {
boot_subtype_results = rbind(boot_subtype_results, boot_subtype_scores)
}
}
rm(boot_subset, boot_subset_subset_run, boot_subtype_scores)
saveRDS(boot_subtype_results, here("Results", paste0("null_", n, "_binic50_bootstrap_",
length(sigs), "sig_subtype_scores.rds")))
View(boot_subtype_results)
View(subtype_scores)
#order the rows by highest to lowest correct
subtype_scores = subtype_scores[order(subtype_scores$av_abs_dif),]
View(subtype_scores)
#To maintain this order when we plot later, factorize the column
subtype_scores$subtype <- factor(subtype_scores$subtype,
ordered = TRUE,
levels = subtype_scores$subtype)
#Set order to = subtype_scores
cancer_order = (as.character(subtype_scores$subtype))
sig_results$subtype <- factor(sig_results$subtype,
ordered = TRUE,
levels = c(cancer_order))
sig_results = sig_results[order(sig_results$subtype),]
#reorder cancer types
boot_results_all$subtype <- factor(boot_results_all$subtype,
ordered = TRUE,
levels = cancer_order)
boot_results_all = boot_results_all[order(boot_results_all$subtype),]
boot_subtype_results$subtype <- factor(boot_subtype_results$subtype,
ordered = TRUE,
levels = cancer_order)
boot_subtype_results = boot_subtype_results[order(boot_subtype_results$subtype),]
## Reformat Data
half_box_data = boot_results_all %>% #label all the null results
mutate(`Prediction Method`="Random Signatures") %>%
mutate(accuracy = av_abs_dif) %>%
select(-run, -av_dif, -av_abs_dif)
View(half_box_data)
View(sig_results)
half_box_data_temp = sig_results %>%
mutate(`Prediction Method`=paste0(length(sigs), "-sig Chemogram"),
accuracy = av_abs_dif) %>%
select(-av_dif, -av_abs_dif)
half_box_data = rbind(half_box_data, half_box_data_temp)
rm(half_box_data_temp)
half_box_data$subtype <- factor(half_box_data$subtype,
ordered = TRUE,
levels = cancer_order)
half_box_data$accuracy = as.numeric(half_box_data$accuracy)
## Plot Half-boxplot beeswarms
ggplot(data=half_box_data, aes(x=subtype, y=accuracy)) +
geom_boxplot(width=0.6, aes(fill=`Prediction Method`, col=`Prediction Method`), alpha=0.8, fatten=NULL) +
stat_summary(fun = mean, geom = "errorbar",
aes(ymax = ..y.., ymin = ..y.., group=`Prediction Method`, col=`Prediction Method`), #add in a line to indicate the mean
width = 0.6, size = 1.5, linetype = "solid",
position=position_dodge(preserve="total")) +
scale_fill_manual(values=c("#e63946", "#a8dadc")) + #change boxplot color
scale_color_manual(values=c("#6a040f", "#03045e")) + #change mean bar color
geom_label(data=subtype_scores, aes(x = subtype, y = 0, label = n), #add n
label.padding = unit(0.15, "lines"), label.size = 0.4, size = 8) +
scale_y_continuous(limits=c(0,1), breaks = c(0,0.25,.5,.75,1))+ #set y axis breaks
scale_x_discrete(limits = cancer_order) +
labs(title = paste0("Predictive Accuracy of Random Signatures vs ",length(sigs),"-sig Chemogram"), #titles and axis labels
subtitle = paste0(nrow(scored_ranks)," Cell Lines, ", n, " Bootstrap Iterations"),
y = "Predictive Accuracy", x = "Disease Site") +
theme_bw(base_size = 15) + #theme and sizing
theme(axis.text.y = element_text(size = 20),
axis.text.x = element_text(size = 20, angle=30, hjust=0.9),
legend.position = "top",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 15))
## Plot Half-boxplot beeswarms
ggplot(data=half_box_data, aes(x=subtype, y=accuracy)) +
geom_boxplot(width=0.6, aes(fill=`Prediction Method`, col=`Prediction Method`), alpha=0.8, fatten=NULL) +
stat_summary(fun = mean, geom = "errorbar",
aes(ymax = ..y.., ymin = ..y.., group=`Prediction Method`, col=`Prediction Method`), #add in a line to indicate the mean
width = 0.6, size = 1.5, linetype = "solid",
position=position_dodge(preserve="total")) +
scale_fill_manual(values=c("#e63946", "#a8dadc")) + #change boxplot color
scale_color_manual(values=c("#6a040f", "#03045e")) + #change mean bar color
geom_label(data=subtype_scores, aes(x = subtype, y = 0, label = n), #add n
label.padding = unit(0.15, "lines"), label.size = 0.4, size = 8) +
scale_y_continuous(limits=c(0,1), breaks = c(0,0.25,.5,.75,1))+ #set y axis breaks
scale_x_discrete(limits = cancer_order) +
labs(title = paste0("Predictive Accuracy of Random Signatures vs ",length(sigs),"-sig Chemogram"), #titles and axis labels
subtitle = paste0(nrow(sig_results)," Cell Lines, ", n, " Bootstrap Iterations"),
y = "Predictive Accuracy", x = "Disease Site") +
theme_bw(base_size = 15) + #theme and sizing
theme(axis.text.y = element_text(size = 20),
axis.text.x = element_text(size = 20, angle=30, hjust=0.9),
legend.position = "top",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 15))
## Plot Half-boxplot beeswarms
ggplot(half_box_data, aes(x=subtype, y=accuracy, col=`Prediction Method`))+
geom_boxplot() +
geom_point()
## Plot Half-boxplot beeswarms
ggplot(half_box_data, aes(x=subtype, y=accuracy, col=`Prediction Method`))+
geom_boxplot()
## Plot Half-boxplot beeswarms
ggplot(half_box_data, aes(x=subtype, y=accuracy, col=`Prediction Method`))+
geom_boxplot()
