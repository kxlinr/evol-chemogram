names_to = "drug_abbrev",
values_to = "score")
plot_score_ht = left_join(cl_order,scores,by="cell_line") %>%
select(-cell_line, -subtype)
cl_order = subtype_key[order(subtype_key$subtype), "cell_line"] #order both heatmaps by alph. subtype
plot_score_ht = left_join(cl_order,scores,by="cell_line") %>%
select(-cell_line, -subtype)
pal = colorRampPalette(c("darkred", "#bb3e03", "#e9d8a6", "#94d2bd", "#0a9396", "#005f73"))
pheatmap::pheatmap(na.omit(plot_score_ht), #data to use
cluster_cols=FALSE, cluster_rows=FALSE, #specify if rows/cols should be clustered
angle_col=0, show_rownames = FALSE,
color = pal(100),
main="Signature Scores Across All Cell Lines", #title
legend_labels = "Sig Score")
n = length(sigs)
score_table = permutations(n, n, seq(n))
#The more drugs there are, the longer it takes to run the code above.
#load the matrix in if it already exists to save time
acc_scores = readRDS(here("Results", paste0(length(sigs),"sig_score_table.rds")))
find_score = function(data, cl){
subset = data %>% filter(cell_line==cl) #filter to just one cl at a time
subset = subset[order(subset$surv, decreasing = FALSE),] #put drugs in order from most response to least response
if(nrow(subset)==length(sigs)){
subset$true_rank = (seq(1, length(sigs))) #label the observed sensitivity rank
subset = subset[order(subset$score, decreasing = TRUE),] #put drugs in order from most response to least response
score = match_df(acc_scores, as.data.frame(t(subset$true_rank))) #find which score goes with the prediction ranking
score=as.numeric(score$score)
} else { #there may be cell lines without data for all the drugs, so those need to be filtered out here
print("Missing drug")
score=NA
}
return(score)
}
all_cl = unique(fit_results$cell_line)
unscored_ranks = left_join(fit_results, scores_long,
by=c("cell_line", "subtype", "drug_abbrev"))
scored_ranks = data.frame(cell_line = all_cl, subtype = NA, accuracy = 0)
for(i in 1:length(all_cl)){
print(paste(i, "out of", length(all_cl), "--", ((i/length(all_cl))*100), "%"))
scored_ranks$cell_line[i] = all_cl[i]
scored_ranks$subtype[i] = as.character(unique(unscored_ranks %>%
filter(cell_line==all_cl[i]) %>%
select(subtype)))
value = find_score(unscored_ranks, all_cl[i])
print(value)
scored_ranks$accuracy[i] = value
}
sigs = sigs[c(1,3,4)]
sig_drugs=sig_drugs[c(1,3,4)]
fit_results = readRDS(here("Results",
paste0(length(sigs), "sig_nlme_fitted_data.rds")))
cl_order = subtype_key[order(subtype_key$subtype), "cell_line"] #order both heatmaps by alph. subtype
#F(X) to subset genes within each drug sensitivity signature, then derive the sensitivity score per cell line
sig_score = function(sig_genes, exprs_norm, drug_abbrev){
exprs_norm2 = exprs_norm %>%
dplyr::select(COSMIC_ID, all_of(sig_genes))
#Find signature score for each cell line
sig_exprs = exprs_norm2[,-1] %>%
mutate(score = apply(.,1,median), cosmic_id = exprs_norm$COSMIC_ID)
#clean up result
score = sig_exprs %>% dplyr::select(cosmic_id, score)
rownames(score) = sig_exprs$cosmic_id
colnames(score) = c("cell_line", "score")
score$drug_abbrev = drug_abbrev
return(score)
}
# #Run the above function for each sig
scores = list()
for(i in 1:length(sigs)){
scores[[i]] = sig_score(sig_genes=sigs[[i]],
exprs_norm=exprs_norm,
drug_abbrev=names(sigs)[i])
names(scores)[i] = names(sigs)[i]
}
#Label cancer type of each cell line
for(i in 1:length(scores)){
#label subtypes
scores[[i]] = merge(scores[[i]], subtype_key, all=TRUE)
#replace NAs with "unclassified"
scores[[i]]$subtype = scores[[i]]$subtype %>%
replace_na('UNCLASSIFIED') #replace any more cancer subtype NAs w/ unclassif.
}
scores_df = do.call(rbind, scores)
scores_df_wide = pivot_wider(scores_df,
id_cols = c(cell_line, subtype),
names_from = drug_abbrev,
values_from = score,
values_fn = mean #for duplicate scores on the same cl+drug, use the mean
)
scores = scores_df_wide
rm(scores_df, scores_df_wide)
scores = scores %>% select(-`NA`)
scores = na.omit(scores)
scores_long = pivot_longer(scores,
cols = c(names(sigs)),
names_to = "drug_abbrev",
values_to = "score")
#The more drugs there are, the longer it takes to run the code above.
#load the matrix in if it already exists to save time
acc_scores = readRDS(here("Results", paste0(length(sigs),"sig_score_table.rds")))
find_score = function(data, cl){
subset = data %>% filter(cell_line==cl) #filter to just one cl at a time
subset = subset[order(subset$surv, decreasing = FALSE),] #put drugs in order from most response to least response
if(nrow(subset)==length(sigs)){
subset$true_rank = (seq(1, length(sigs))) #label the observed sensitivity rank
subset = subset[order(subset$score, decreasing = TRUE),] #put drugs in order from most response to least response
score = match_df(acc_scores, as.data.frame(t(subset$true_rank))) #find which score goes with the prediction ranking
score=as.numeric(score$score)
} else { #there may be cell lines without data for all the drugs, so those need to be filtered out here
print("Missing drug")
score=NA
}
return(score)
}
all_cl = unique(fit_results$cell_line)
unscored_ranks = left_join(fit_results, scores_long,
by=c("cell_line", "subtype", "drug_abbrev"))
scored_ranks = data.frame(cell_line = all_cl, subtype = NA, accuracy = 0)
for(i in 1:length(all_cl)){
print(paste(i, "out of", length(all_cl), "--", ((i/length(all_cl))*100), "%"))
scored_ranks$cell_line[i] = all_cl[i]
scored_ranks$subtype[i] = as.character(unique(unscored_ranks %>%
filter(cell_line==all_cl[i]) %>%
select(subtype)))
value = find_score(unscored_ranks, all_cl[i])
print(value)
scored_ranks$accuracy[i] = value
}
#all the values with NA had missing drug response data and should be excluded
nrow(scored_ranks)
scored_ranks_full = na.omit(scored_ranks) #986 to 759 for 3 sigs, 616 after rm unclassified cell lines
#968 to 670 for 10sig, 539 after rm unclass.
nrow(scored_ranks_full)
#create a new df with one row per subtype, and columns = subtype, proportion_correct
subtype = unique(scored_ranks_full$subtype)
subtype_scores = data.frame(subtype=subtype, accuracy=0, n = 0)
for (i in 1:length(subtype)){
#Subset data per subtype
subset = scored_ranks_full[which(scored_ranks_full$subtype == subtype[i]),]
#Store subtype name
subtype_scores$subtype[i] = subtype[i]
#calc and store % of cell line survivals correctly predicted
subtype_scores$accuracy[i] = round((sum(subset$accuracy)/nrow(subset)), digits=3)
#Indicate number of cell lines in subtype (n)
subtype_scores$n[i] = nrow(subset)
}
#order the rows by highest to lowest correct
subtype_scores = subtype_scores[order(subtype_scores$accuracy),]
#To maintain this order when we plot later, factorize the column
subtype_scores$subtype <- factor(subtype_scores$subtype,
ordered = TRUE,
levels = subtype_scores$subtype)
#remove unclassified cell lines
scored_ranks_full = scored_ranks_full %>% filter(subtype != "UNCLASSIFIED")
#Set order to = subtype_scores
cancer_order = (as.character(subtype_scores$subtype))[-c(which(as.character(subtype_scores$subtype)=="UNCLASSIFIED"))]
scored_ranks_full$subtype <- factor(scored_ranks_full$subtype,
ordered = TRUE,
levels = c(cancer_order))
scored_ranks_full = scored_ranks_full[order(scored_ranks_full$subtype),]
#remove unclassified from subtype score averages
subtype_scores$subtype <- factor(subtype_scores$subtype,
ordered = TRUE,
levels = c(cancer_order))
subtype_scores = subtype_scores[order(subtype_scores$subtype),]
#save
# saveRDS(scored_ranks_full, here("Results", paste0(length(sigs),"sig_accuracy_scores_cleaned.rds")))
ggplot(scored_ranks_full, aes(x = subtype, y=accuracy)) + #select data to plot
geom_boxplot(width=0.4, fill="#9b2226", alpha = 0.6, fatten = NULL) + #boxplot, fatten=null is getting rid of the median line
ggbeeswarm::geom_quasirandom(method="smiley", width=0.2, alpha=0.4, size = 3, color="#6a040f") + #beeswarm
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), #add in a line to indicate the mean
width = 0.4, size = 2, linetype = "solid") +
geom_label(data=na.omit(subtype_scores), aes(x = subtype, y = 0, label = n), #add n
label.padding = unit(0.15, "lines"), label.size = 0.4, size = 8) +
scale_y_continuous(limits = c(0, 1), breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +
labs(title=paste0("Predictive Accuracy of ", length(sigs), "-sig Chemogram"),
subtitle = paste0(nrow(scored_ranks_full)," Cell Lines"),
y = "Predictive Accuracy", x = "Disease Site") +
theme_bw(base_size = 15) + #theme and sizing
theme(axis.text.y = element_text(size = 20),
axis.text.x = element_text(angle=30, size = 20, hjust=.9),
legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 10))
# beeswarm boxplot
p1 = ggplot(scored_ranks_full, aes(x = subtype, y=accuracy)) + #select data to plot
geom_boxplot(width=0.4, fill="#9b2226", alpha = 0.6, fatten = NULL) + #boxplot, fatten=null is getting rid of the median line
ggbeeswarm::geom_quasirandom(method="smiley", width=0.2, alpha=0.4, size = 3, color="#6a040f") + #beeswarm
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), #add in a line to indicate the mean
width = 0.4, size = 2, linetype = "solid") +
geom_label(data=na.omit(subtype_scores), aes(x = subtype, y = 0, label = n), #add n
label.padding = unit(0.15, "lines"), label.size = 0.4, size = 8) +
scale_y_continuous(limits = c(0, 1), breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +
labs(title=paste0("Predictive Accuracy of ", length(sigs), "-sig Chemogram"),
subtitle = paste0(nrow(scored_ranks_full)," Cell Lines"),
y = "Predictive Accuracy", x = "Disease Site") +
theme_bw(base_size = 15) + #theme and sizing
theme(axis.text.y = element_text(size = 20),
axis.text.x = element_text(angle=30, size = 20, hjust=.9),
legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 10))
ggsave(plot=p1,
filename=here("Plots",
paste0(length(sigs), "sig_accuracy_boxplots_gapdh.png")),
width = 15, height = 9) #save plot
fit_results = readRDS(here("Results",
paste0(length(sigs), "sig_nlme_fitted_data.rds")))
#F(X) to subset genes within each drug sensitivity signature, then derive the sensitivity score per cell line
sig_score = function(sig_genes, exprs_norm, drug_abbrev){
exprs_norm2 = exprs_norm %>%
dplyr::select(COSMIC_ID, all_of(sig_genes))
#Find signature score for each cell line
sig_exprs = exprs_norm2[,-1] %>%
mutate(score = apply(.,1,median), cosmic_id = exprs_norm$COSMIC_ID)
#clean up result
score = sig_exprs %>% dplyr::select(cosmic_id, score)
rownames(score) = sig_exprs$cosmic_id
colnames(score) = c("cell_line", "score")
score$drug_abbrev = drug_abbrev
return(score)
}
# #Run the above function for each sig
scores = list()
for(i in 1:length(sigs)){
scores[[i]] = sig_score(sig_genes=sigs[[i]],
exprs_norm=exprs_norm,
drug_abbrev=names(sigs)[i])
names(scores)[i] = names(sigs)[i]
}
#Label cancer type of each cell line
for(i in 1:length(scores)){
#label subtypes
scores[[i]] = merge(scores[[i]], subtype_key, all=TRUE)
#replace NAs with "unclassified"
scores[[i]]$subtype = scores[[i]]$subtype %>%
replace_na('UNCLASSIFIED') #replace any more cancer subtype NAs w/ unclassif.
}
scores_df = do.call(rbind, scores)
scores_df_wide = pivot_wider(scores_df,
id_cols = c(cell_line, subtype),
names_from = drug_abbrev,
values_from = score,
values_fn = mean #for duplicate scores on the same cl+drug, use the mean
)
scores = scores_df_wide
rm(scores_df, scores_df_wide)
scores = scores %>% select(-`NA`)
scores = na.omit(scores)
scores_long = pivot_longer(scores,
cols = c(names(sigs)),
names_to = "drug_abbrev",
values_to = "score")
#The more drugs there are, the longer it takes to run the code above.
#load the matrix in if it already exists to save time
acc_scores = readRDS(here("Results", paste0(length(sigs),"sig_score_table.rds")))
find_score = function(data, cl){
subset = data %>% filter(cell_line==cl) #filter to just one cl at a time
subset = subset[order(subset$surv, decreasing = FALSE),] #put drugs in order from most response to least response
if(nrow(subset)==length(sigs)){
subset$true_rank = (seq(1, length(sigs))) #label the observed sensitivity rank
subset = subset[order(subset$score, decreasing = TRUE),] #put drugs in order from most response to least response
score = match_df(acc_scores, as.data.frame(t(subset$true_rank))) #find which score goes with the prediction ranking
score=as.numeric(score$score)
} else { #there may be cell lines without data for all the drugs, so those need to be filtered out here
print("Missing drug")
score=NA
}
return(score)
}
all_cl = unique(fit_results$cell_line)
unscored_ranks = left_join(fit_results, scores_long,
by=c("cell_line", "subtype", "drug_abbrev"))
scored_ranks = data.frame(cell_line = all_cl, subtype = NA, accuracy = 0)
for(i in 1:length(all_cl)){
print(paste(i, "out of", length(all_cl), "--", ((i/length(all_cl))*100), "%"))
scored_ranks$cell_line[i] = all_cl[i]
scored_ranks$subtype[i] = as.character(unique(unscored_ranks %>%
filter(cell_line==all_cl[i]) %>%
select(subtype)))
value = find_score(unscored_ranks, all_cl[i])
print(value)
scored_ranks$accuracy[i] = value
}
#all the values with NA had missing drug response data and should be excluded
nrow(scored_ranks)
scored_ranks_full = na.omit(scored_ranks) #986 to 759 for 3 sigs, 616 after rm unclassified cell lines
#968 to 670 for 10sig, 539 after rm unclass.
nrow(scored_ranks_full)
#create a new df with one row per subtype, and columns = subtype, proportion_correct
subtype = unique(scored_ranks_full$subtype)
subtype_scores = data.frame(subtype=subtype, accuracy=0, n = 0)
for (i in 1:length(subtype)){
#Subset data per subtype
subset = scored_ranks_full[which(scored_ranks_full$subtype == subtype[i]),]
#Store subtype name
subtype_scores$subtype[i] = subtype[i]
#calc and store % of cell line survivals correctly predicted
subtype_scores$accuracy[i] = round((sum(subset$accuracy)/nrow(subset)), digits=3)
#Indicate number of cell lines in subtype (n)
subtype_scores$n[i] = nrow(subset)
}
#order the rows by highest to lowest correct
subtype_scores = subtype_scores[order(subtype_scores$accuracy),]
#To maintain this order when we plot later, factorize the column
subtype_scores$subtype <- factor(subtype_scores$subtype,
ordered = TRUE,
levels = subtype_scores$subtype)
#remove unclassified cell lines
scored_ranks_full = scored_ranks_full %>% filter(subtype != "UNCLASSIFIED")
#Set order to = subtype_scores
cancer_order = (as.character(subtype_scores$subtype))[-c(which(as.character(subtype_scores$subtype)=="UNCLASSIFIED"))]
scored_ranks_full$subtype <- factor(scored_ranks_full$subtype,
ordered = TRUE,
levels = c(cancer_order))
scored_ranks_full = scored_ranks_full[order(scored_ranks_full$subtype),]
#remove unclassified from subtype score averages
subtype_scores$subtype <- factor(subtype_scores$subtype,
ordered = TRUE,
levels = c(cancer_order))
subtype_scores = subtype_scores[order(subtype_scores$subtype),]
# beeswarm boxplot
p1 = ggplot(scored_ranks_full, aes(x = subtype, y=accuracy)) + #select data to plot
geom_boxplot(width=0.4, fill="#9b2226", alpha = 0.6, fatten = NULL) + #boxplot, fatten=null is getting rid of the median line
ggbeeswarm::geom_quasirandom(method="smiley", width=0.2, alpha=0.4, size = 3, color="#6a040f") + #beeswarm
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), #add in a line to indicate the mean
width = 0.4, size = 2, linetype = "solid") +
geom_label(data=na.omit(subtype_scores), aes(x = subtype, y = 0, label = n), #add n
label.padding = unit(0.15, "lines"), label.size = 0.4, size = 8) +
scale_y_continuous(limits = c(0, 1), breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +
labs(title=paste0("Predictive Accuracy of ", length(sigs), "-sig Chemogram"),
subtitle = paste0(nrow(scored_ranks_full)," Cell Lines"),
y = "Predictive Accuracy", x = "Disease Site") +
theme_bw(base_size = 15) + #theme and sizing
theme(axis.text.y = element_text(size = 20),
axis.text.x = element_text(angle=30, size = 20, hjust=.9),
legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 10))
p1
ggsave(plot=p1,
filename=here("Plots",
paste0(length(sigs), "sig_accuracy_boxplots_gapdh.png")),
width = 15, height = 9) #save plot
View(exprs_norm)
View(scores)
View(scored_ranks_full)
cell_lines = readRDS(here("Data", "cleaned_cell_line_meta.rds"))
subtype_key = readRDS(here("Data", "subtype_key.rds"))
# exprs_norm = readRDS(here("Data", "normalized_exprs.rds"))
exprs_norm = readRDS(here("Data", "normalized_exprs_to_gapdh.rds"))
drug_id_key = readRDS(here("Data", "drug_id_key.rds"))
norm_dose_resp = readRDS(here("Data", "prepped_drug_resp.rds"))
sig_files = list.files(here("Data", "Signatures"))
sigs = lapply(sig_files, function(x) readRDS(here("Data", "Signatures", x)))
names(sigs) = gsub("\\_.*", "", sig_files) #cut off everything after the first underscore
## we also need the full drug names to match with the correct drug response data. those need to be manually entered in the *same order* as the list shows
#make sure theyre spelled right! can check the `drug_id_key` table for spelling
names(sigs) #print this to make sure the order is correct
sig_drugs = c("Cisplatin", "Cytarabine", "5-Fluorouracil", "Gemcitabine", "Irinotecan",
"Luminespib", "Paclitaxel", "Topotecan", "Vinblastine", "Vorinostat")
rm(sig_files)
sigs = sigs[c(1,3,4)]
sig_drugs=sig_drugs[c(1,3,4)]
fit_results = readRDS(here("Results",
paste0(length(sigs), "sig_nlme_fitted_data.rds")))
cl_order = subtype_key[order(subtype_key$subtype), "cell_line"] #order both heatmaps by alph. subtype
#F(X) to subset genes within each drug sensitivity signature, then derive the sensitivity score per cell line
sig_score = function(sig_genes, exprs_norm, drug_abbrev){
exprs_norm2 = exprs_norm %>%
dplyr::select(COSMIC_ID, all_of(sig_genes))
#Find signature score for each cell line
sig_exprs = exprs_norm2[,-1] %>%
mutate(score = apply(.,1,median), cosmic_id = exprs_norm$COSMIC_ID)
#clean up result
score = sig_exprs %>% dplyr::select(cosmic_id, score)
rownames(score) = sig_exprs$cosmic_id
colnames(score) = c("cell_line", "score")
score$drug_abbrev = drug_abbrev
return(score)
}
# #Run the above function for each sig
scores = list()
for(i in 1:length(sigs)){
scores[[i]] = sig_score(sig_genes=sigs[[i]],
exprs_norm=exprs_norm,
drug_abbrev=names(sigs)[i])
names(scores)[i] = names(sigs)[i]
}
#Label cancer type of each cell line
for(i in 1:length(scores)){
#label subtypes
scores[[i]] = merge(scores[[i]], subtype_key, all=TRUE)
#replace NAs with "unclassified"
scores[[i]]$subtype = scores[[i]]$subtype %>%
replace_na('UNCLASSIFIED') #replace any more cancer subtype NAs w/ unclassif.
}
scores_df = do.call(rbind, scores)
scores_df_wide = pivot_wider(scores_df,
id_cols = c(cell_line, subtype),
names_from = drug_abbrev,
values_from = score,
values_fn = mean #for duplicate scores on the same cl+drug, use the mean
)
scores = scores_df_wide
rm(scores_df, scores_df_wide)
scores = scores %>% select(-`NA`)
View(scores)
scores = na.omit(scores)
scores_long = pivot_longer(scores,
cols = c(names(sigs)),
names_to = "drug_abbrev",
values_to = "score")
#The more drugs there are, the longer it takes to run the code above.
#load the matrix in if it already exists to save time
acc_scores = readRDS(here("Results", paste0(length(sigs),"sig_score_table.rds")))
View(acc_scores)
find_score = function(data, cl){
subset = data %>% filter(cell_line==cl) #filter to just one cl at a time
subset = subset[order(subset$surv, decreasing = FALSE),] #put drugs in order from most response to least response
if(nrow(subset)==length(sigs)){
subset$true_rank = (seq(1, length(sigs))) #label the observed sensitivity rank
subset = subset[order(subset$score, decreasing = TRUE),] #put drugs in order from most response to least response
score = match_df(acc_scores, as.data.frame(t(subset$true_rank))) #find which score goes with the prediction ranking
score=as.numeric(score$score)
} else { #there may be cell lines without data for all the drugs, so those need to be filtered out here
print("Missing drug")
score=NA
}
return(score)
}
all_cl = unique(fit_results$cell_line)
unscored_ranks = left_join(fit_results, scores_long,
by=c("cell_line", "subtype", "drug_abbrev"))
scored_ranks = data.frame(cell_line = all_cl, subtype = NA, accuracy = 0)
for(i in 1:length(all_cl)){
print(paste(i, "out of", length(all_cl), "--", ((i/length(all_cl))*100), "%"))
scored_ranks$cell_line[i] = all_cl[i]
scored_ranks$subtype[i] = as.character(unique(unscored_ranks %>%
filter(cell_line==all_cl[i]) %>%
select(subtype)))
value = find_score(unscored_ranks, all_cl[i])
print(value)
scored_ranks$accuracy[i] = value
}
#all the values with NA had missing drug response data and should be excluded
nrow(scored_ranks)
scored_ranks_full = na.omit(scored_ranks) #986 to 759 for 3 sigs, 616 after rm unclassified cell lines
#968 to 670 for 10sig, 539 after rm unclass.
nrow(scored_ranks_full)
#create a new df with one row per subtype, and columns = subtype, proportion_correct
subtype = unique(scored_ranks_full$subtype)
subtype_scores = data.frame(subtype=subtype, accuracy=0, n = 0)
for (i in 1:length(subtype)){
#Subset data per subtype
subset = scored_ranks_full[which(scored_ranks_full$subtype == subtype[i]),]
#Store subtype name
subtype_scores$subtype[i] = subtype[i]
#calc and store % of cell line survivals correctly predicted
subtype_scores$accuracy[i] = round((sum(subset$accuracy)/nrow(subset)), digits=3)
#Indicate number of cell lines in subtype (n)
subtype_scores$n[i] = nrow(subset)
}
#order the rows by highest to lowest correct
subtype_scores = subtype_scores[order(subtype_scores$accuracy),]
#To maintain this order when we plot later, factorize the column
subtype_scores$subtype <- factor(subtype_scores$subtype,
ordered = TRUE,
levels = subtype_scores$subtype)
#remove unclassified cell lines
scored_ranks_full = scored_ranks_full %>% filter(subtype != "UNCLASSIFIED")
#Set order to = subtype_scores
cancer_order = (as.character(subtype_scores$subtype))[-c(which(as.character(subtype_scores$subtype)=="UNCLASSIFIED"))]
scored_ranks_full$subtype <- factor(scored_ranks_full$subtype,
ordered = TRUE,
levels = c(cancer_order))
scored_ranks_full = scored_ranks_full[order(scored_ranks_full$subtype),]
#remove unclassified from subtype score averages
subtype_scores$subtype <- factor(subtype_scores$subtype,
ordered = TRUE,
levels = c(cancer_order))
subtype_scores = subtype_scores[order(subtype_scores$subtype),]
#save
# saveRDS(scored_ranks_full, here("Results", paste0(length(sigs),"sig_accuracy_scores_cleaned.rds")))
View(scored_ranks_full)
# beeswarm boxplot
p1 = ggplot(scored_ranks_full, aes(x = subtype, y=accuracy)) + #select data to plot
geom_boxplot(width=0.4, fill="#9b2226", alpha = 0.6, fatten = NULL) + #boxplot, fatten=null is getting rid of the median line
ggbeeswarm::geom_quasirandom(method="smiley", width=0.2, alpha=0.4, size = 3, color="#6a040f") + #beeswarm
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), #add in a line to indicate the mean
width = 0.4, size = 2, linetype = "solid") +
geom_label(data=na.omit(subtype_scores), aes(x = subtype, y = 0, label = n), #add n
label.padding = unit(0.15, "lines"), label.size = 0.4, size = 8) +
scale_y_continuous(limits = c(0, 1), breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +
labs(title=paste0("Predictive Accuracy of ", length(sigs), "-sig Chemogram"),
subtitle = paste0(nrow(scored_ranks_full)," Cell Lines"),
y = "Predictive Accuracy", x = "Disease Site") +
theme_bw(base_size = 15) + #theme and sizing
theme(axis.text.y = element_text(size = 20),
axis.text.x = element_text(angle=30, size = 20, hjust=.9),
legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text = element_text(size = 10))
p1
ggsave(plot=p1,
filename=here("Plots",
paste0(length(sigs), "sig_accuracy_boxplots_gapdh.png")),
width = 15, height = 9) #save plot
